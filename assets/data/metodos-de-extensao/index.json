{"hash":"21e8d6024374c8b3453b554d6d762f3435f72b44","data":{"post":{"title":"Métodos de extensão","path":"/metodos-de-extensao/","date":"09/03/2020","tags":[{"id":"C#","title":"C#","path":"/tag/C%23/"},{"id":"Feature","title":"Feature","path":"/tag/Feature/"}],"description":"Métodos de extensão pertencem a categoria de métodos estáticos, no entanto, possuem a sutil divergência de serem usados como métodos de instancias da tipagem estendida.","content":"<h2 id=\"introdução\"><a href=\"#introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introdução</h2>\n<p>O presente artigo objetiva demonstrar o uso de métodos de extensão em paralelo com: DRY, Legibilidade e HOF </p>\n<p>Métodos de extensão pertencem a categoria de métodos estáticos, no entanto, possuem a sutil divergência de serem usados como métodos de instancias da tipagem estendida</p>\n<h2 id=\"1-demonstração\"><a href=\"#1-demonstra%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Demonstração</h2>\n<p>Supondo que precisássemos escrever um código que exibisse o segundo caractere de uma string (sim, já existe o método First, por isso decide obter o segundo caractere. Sim, eu sou uma pessoa muito criativa), poderíamos escrevê-lo da seguinte maneira:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Linkedin\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">char</span></span> secondLetter <span class=\"token operator\">=</span> text<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Agora, apenas para exemplificar o conceito, iremos <strong>estender</strong> a funcionalidade para obter o segundo caractere de uma string. Primeiro, criaremos uma classe estática que ira conter nosso método de extensão. Em seguida, declararemos o método propriamente dito. Veja a seguir:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Extensions</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">char</span></span> <span class=\"token function\">Second</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> text<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>O pulo do gato está na palavra reservada this, a qual antecede o primeiro parâmetro do nosso método. Basicamente, estamos proferindo que: toda valor da tipagem string, seja uma constante ou uma variável, terá o comportamento Second. </p>\n<p>Portanto, podemos realizar o mesmo comportamento do seguinte modo:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Linkedin\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">char</span></span> secondLetter <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">Second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"2-dry-dont-repeat-yourself\"><a href=\"#2-dry-dont-repeat-yourself\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. DRY (Don't repeat yourself)</h2>\n<p>Métodos de extensão podem auxiliar a evadir a duplicação de código.</p>\n<p>Vamos usar o Dictionary do C# como exemplo. É bastante comum gerir quando um valor deve ser inserido ou atualizado, afinal de contas, não podemos atualizar um valor caso a chave inexista no dicionário. Esse controle pode ser representado como na maneira abaixo:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> peopleByAge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Ayame\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Zenki\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">37</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"Ayame\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> notContains <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>peopleByAge<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>notContains<span class=\"token punctuation\">)</span>\n    peopleByAge<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    peopleByAge<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Temos um dicionário que engloba chaves do tipo string e valores do tipo inteiro. Esse dicionário representa nomes como chaves e idades como valores. E para gerir se uma pessoa deve ser inserida ou atualizada, fazemos um controle simples: verificamos se a chave existe no dicionário, se ela não existir então inserimos uma pessoa, caso contrário, acessamos o dicionário pelo nome dela e sobrescrevemos a sua idade.</p>\n<p>Certo, mas será que esse comportamento não ocorre em diversas partes de um sistema? E será que em todas essas partes essa lógica não acaba sendo duplicada?</p>\n<p>Pois é, apesar do Dictionary não prover um método que exerça esta ação, nada nos impede de <strong>estendermos</strong> este comportamento. Basta criamos um método de extensão! Porém, desta vez, faremos um <strong>método de extensão genérico</strong>, segue abaixo:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">TValue</span> <span class=\"token generic-method\"><span class=\"token function\">Upsert</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IDictionary<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> notContains <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>@<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>notContains<span class=\"token punctuation\">)</span>\n        @<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n        @<span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> peopleByAge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Ayame\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Zenki\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">37</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"Ayame\"</span><span class=\"token punctuation\">;</span>\n\npeopleByAge<span class=\"token punctuation\">.</span><span class=\"token function\">Upsert</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Assim obtemos o mesmo resultado com apenas uma linha, além de evitar repetir o mesmo fluxo em todas as partes do sistema.</p>\n<h2 id=\"3-legibilidade\"><a href=\"#3-legibilidade\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Legibilidade</h2>\n<p>Existe uma polêmica milenar de desenvolvedores que negam variáveis booleanas com o operador de negação enquanto outros utilizam o == false. Eu discordo de ambos.</p>\n<p>Acredito que, por questão semântica, toda verificação booleana deva ser auferida tanto por um comportamento que ratifica o caso verdadeiro quanto por um comportamento que certifica o caso falso. Para elucidar minha visão, usaremos como exemplo, o método Contains de uma string.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello LinkedIn\"</span><span class=\"token punctuation\">;</span>\n\nmessage<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedIn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">!</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedIn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessage<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedIn\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ao invés de usar ! ou == false, não fica mais claro escrevermos do jeito abaixo?</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">NotContains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>@<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello LinkedIn\"</span><span class=\"token punctuation\">;</span>\n\nmessage<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedIn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessage<span class=\"token punctuation\">.</span><span class=\"token function\">NotContains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedIn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Um outro exemplo clássico: Any. Podemos usar o método Any para verificar se há algum elemento que condiga com predicado parametrizado. Entretanto, quando precisamos confirmar o contrario, ou seja, verificar que não há elemento algum que corresponda com predicado parametrizado, novamente seria usado a negação, porém não faria mais sentido estender um método genérico chamado None que fizesse isso por nós?</p>\n<h2 id=\"4-hof-higher-order-function\"><a href=\"#4-hof-higher-order-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. HOF (Higher order function)</h2>\n<p>Higher order function ou função de alta ordem para os lusófonos, pode ser categorizada como:</p>\n<ul>\n<li>Uma função que recebe uma ou mais funções como argumento;</li>\n<li>Ou uma função que retorna uma função;</li>\n<li>Ou ambos os casos.</li>\n</ul>\n<p>Primeiro, vamos usar o seguinte cenário como exemplo: precisamos escrever um código que receba um número inteiro como entrada e então devemos exibir na tela se este número é maior ou menor do que 10.</p>\n<p>Pois bem, uma forma de resolver esse problema seria a seguinte:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> number <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isGreaterThanTen <span class=\"token operator\">=</span> number <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isGreaterThanTen<span class=\"token punctuation\">)</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number is greater than 10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number is less than 10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Poderíamos usar o operador ternário para alternar a mensagem que seria mostrada, visto que se trata de um cenário simples, mas vamos usar if e else para facilitar as coisas.</p>\n<p>Certo, agora veja como conseguimos deixar nosso código com uma pegada mais funcional usando métodos de extensão.</p>\n<p>Primeiro iremos <strong>estender</strong> um comportamento para validar se um inteiro é maior que outro:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">GreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> number<span class=\"token punctuation\">)</span> \n    <span class=\"token operator\">=></span> @<span class=\"token keyword\">this</span> <span class=\"token operator\">></span> number<span class=\"token punctuation\">;</span></code></pre>\n<p>Receberemos um booleano. Agora iremos estender um comportamento para executar uma função caso o valor booleano seja verdadeiro:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>@<span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Além disso, estenderemos também um comportamento para executar uma função caso o valor booleano seja falso:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Otherwise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>@<span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Agora, veja o resultado final:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> number <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\nnumber\n      <span class=\"token punctuation\">.</span><span class=\"token function\">GreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">Then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">number</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> is greater than 10\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// if</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">Otherwise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">number</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> is less than 10\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// else</span></code></pre>\n<p>GreaterThan retorna um booleano, como temos um booleano de retorno podemos usar o comportamento Then, o qual irá exibir a mensagem informando que o número é de fato maior que dez, mas note que o Then além de usar @this no if, também o retorna ao final da função, com isso nós temos um booleano, portanto, podemos usar o comportamento Otherwise, o qual irá exibir a mensagem informando que o número é de fato menor do que dez. Com apenas três métodos de extensão conseguimos montar um encadeamento simples para resolver o problema com um código completamente diferente.</p>\n<h2 id=\"palavras-finais\"><a href=\"#palavras-finais\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Palavras finais</h2>\n<p>Estes foram alguns exemplos simples que visam expor a diferença que os métodos de extensão podem trazer em uma base de código.</p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/Me%CC%81todos%20de%20extensa%CC%83o.07cc2b7.2dc6dbb56dcf67f1d324a65176194a56.jpg","size":{"width":860,"height":574},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/Me%CC%81todos%20de%20extensa%CC%83o.a67b0b2.2dc6dbb56dcf67f1d324a65176194a56.jpg 480w","/assets/static/Me%CC%81todos%20de%20extensa%CC%83o.07cc2b7.2dc6dbb56dcf67f1d324a65176194a56.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 574' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3b6bf94c694fbd14784a7822476517af'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3b6bf94c694fbd14784a7822476517af)' width='860' height='574' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAArAEADASIAAhEBAxEB/8QAHAAAAQQDAQAAAAAAAAAAAAAABQMEBgcBAggA/8QAMhAAAgEDAwIEAwYHAAAAAAAAAQIDAAQRBRIhE1EGMUFhBzKRCBQiI0JScYGCscHR0v/EABcBAAMBAAAAAAAAAAAAAAAAAAABAgP/xAAcEQEBAQEAAgMAAAAAAAAAAAABAAIRAzESIUH/2gAMAwEAAhEDEQA/AKP3ZcYpy6jbjFM422sD2p9bqZwzdq0sZm6EGloLcyEZGBRyTRVj0Y3kkgDn5V70AMz5ChsCkPYjkGlo6bichR5ViW16S9SRSF/SO9SOPTDYaDFfSupUqpKEepP1OACcfwrTxHZ6hcLa3Uem3QsmAIcRkjHvikiSEoVewNHh2Hz8ikIU3HnyqR%2bMWtQ9tFZsGCoN3sajbyMQB5YqfHp1ntewy8tY1BcBvKntmGNztiORmmRyDSttO0Em5POtKY54gu3jtorYHAxkgU58C6VDcPNqN7D14LdgkUX75Dz9AP7io/JK17dKZDRew1Y6RuWJFdc5AYn8J9SKXEIOfta%2blaSt3GkutS/fXOWECgRxKDyF7kDv60YvJYlB3QkmNQpK5VVOMADHYCgXwg1ifXdWupbx0QQ9JYhgY3s3rnzOFNX1IoC84PfcBzTz8vdOjL9XON/HBqjyW01tZTOikqlx%2bVI3sJVxn%2brNV3r%2bkJaSv0IbqBl%2beC4AJX3Vxww%2bhrri%2btrMpmS0tifeJT/ioZren2Vw7NJBbjPHMYxVJ2keXNEUPVXNIPGUbmt7dmHAPFYmJLDNTaXrYnrAgZp5eRIcMTg9qUsEUcgDNI35PWxRKtj7PjLHc6ixTIDxkMTwNqt/1V4TaiDkZyao/wCB52wXGOMl8/RP9mrRdjk8nzqj1Rr3LX98xzg/yqMahM7Mxc7s8DFFLkndQe753UMi/9k=' /%3e%3c/svg%3e"}}},"context":{}}