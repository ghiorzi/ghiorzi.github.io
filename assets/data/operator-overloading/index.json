{"hash":"5cdbf1b1bf41db416ddabe793616c9e87db5d8e5","data":{"post":{"title":"Operator overloading","path":"/operator-overloading/","date":"29/09/2019","tags":[{"id":"C#","title":"C#","path":"/tag/C%23/"},{"id":"Feature","title":"Feature","path":"/tag/Feature/"}],"description":"Sobrecarga é um conceito costumeiro no universo da programação, no entanto, estamos mais familiarizados com essa feature conduzida a construtores e métodos.","content":"<h2 id=\"1-introdução\"><a href=\"#1-introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Introdução</h2>\n<p>Sobrecarga é um conceito costumeiro no universo da programação, no entanto, estamos mais familiarizados com essa feature conduzida a construtores e métodos.</p>\n<h4 id=\"mas-primeiramente-o-que-é-sobrecarga-de-método-e-sobrecarga-de-construtor\"><a href=\"#mas-primeiramente-o-que-%C3%A9-sobrecarga-de-m%C3%A9todo-e-sobrecarga-de-construtor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mas primeiramente, o que é sobrecarga de método e sobrecarga de construtor?</h4>\n<p>A sobrecarga de método é um artifício que permite uma classe ter mais de um método com o mesmo nome, contanto que seus argumentos sejam dessemelhantes. O mesmo se aplica aos construtores, desde que seus argumentos sejam distintos. Vejamos alguns exemplos no seguinte trecho:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OverloadSample</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">OverloadSample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Sobrecarga de construtor #1</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">OverloadSample</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> something<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Sobrecarga de método #1: Mesma quantidade de parâmetros, porém com tipagem distinta.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Sobrecarga de método #2: Retorno com tipagem diferente, mas com quantidade de parâmetros divergente.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"2-sobrecarga-de-operador\"><a href=\"#2-sobrecarga-de-operador\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Sobrecarga de operador</h2>\n<p>Sobrecarga é um conceito costumeiro no universo da programação, no entanto, estamos mais familiarizados com essa feature conduzida a construtores e métodos.</p>\n<p>Como supramencionado, sobrecarga é um conceito deveras popular, entretanto, nem todos os programadores estão cônscios que sobrecarregar um operador é uma ação plenamente exequível. </p>\n<p>Para aplicar este conceito, iremos trabalhar em cima de um exemplo demasiadamente simples: iremos criar uma classe chamada <strong>NonNullOrEmptyString</strong>, esta classe será responsável por representar uma string que não pode ser nula nem vazia.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NonNullOrEmptyString</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value cannot be null or empty.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        Value <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Estamos acostumados a criar um objeto através da palavra-chave <strong>new</strong>, logo, em primeiro momento, pensaríamos em criar nosso objeto da seguinte forma:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">NonNullOrEmptyString</span> sample <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Contudo, se eu disser: podemos criar esse objeto de uma maneira mais simplificada, inclusive, atribuindo a string “Hello” diretamente ao objeto. O que você diria?</p>\n<h2 id=\"3-operadores-de-conversão\"><a href=\"#3-operadores-de-convers%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Operadores de conversão</h2>\n<p>Antes de tudo, o que é conversão? </p>\n<p>Conversão é a ação que permite que um valor de um tipo seja transformado em outro tipo qualquer. Uma conversão pode ser categorizada como <strong>implícita*</strong> ou <strong>explícita</strong>. </p>\n<p>A conversão <strong>implícita</strong> ocorre de modo imperceptível sob as condições de haver um operador (de conversão implícita) definido bem como a compatibilidade entre os dois tipos. </p>\n<p>Já a conversão <strong>explícita</strong> intercorre quando os dois tipos não são integralmente compatíveis, portanto, é requerido que o tipo de origem seja prefixado com um operador de conversão (famigerado <strong>casting</strong>).</p>\n<p>Então, para começar, que tal sobrecarregarmos nossos primeiros operadores de conversão? </p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> @<span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span>@<span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> @<span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> @<span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span></code></pre>\n<p>Muito bem, agora que temos nossas primeiras sobrecargas podemos criar nossos objetos da seguinte maneira:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Implicit conversion</span>\n<span class=\"token class-name\">NonNullOrEmptyString</span> firstText <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Explicit conversion</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> secondText <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yahallo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Criamos nossos objetos com conversão implícita, desta forma, é praticável atribuir uma string diretamente para nossos objetos do tipo <strong>NonNullOrEmptyString</strong>. Podemos também transmutar nosso objeto para uma string, através de uma conversão explícita previamente definida em nossa classe. </p>\n<blockquote>\n<p>Lembre-se: estamos falando de sobrecargas, portanto, podemos definir diversas sobrecargas de operadores.</p>\n</blockquote>\n<p>Vamos supor que agora quiséssemos comparar se o valor de uma <strong>NonNullOrEmptyString</strong> é igual ou diferente de outra <strong>NonNullOrEmptyString.</strong> Bom, estamos falando de objetos, então se os compararmos diretamente será levado em conta a referência deles e não os seus valores. Logo, a opção que nos resta é fazer essa comparação da seguinte forma, certo?</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">==</span> secondText<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">!=</span> secondText<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Errou, errou feio, errou rude</strong>. Temos ainda a opção de sobrescrever o método Equals, oriundo da memorável classe <strong>Object</strong>, mas não faremos desta forma, pois o assunto do artigo é sobrecarga, não sobrescrita.</p>\n<p>Então o que podemos fazer... Que tal uma sobrecarga nos operadores == e !=?</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Legal, agora podemos fazer a comparação de valores sem precisar acessar a propriedade Value dos nossos objetos:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">==</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">!=</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">==</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">!=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>E se quiséssemos concatenar nossos objetos, poderíamos? Certamente, basta\nsobrecarregar nosso operador <strong>+</strong>:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> NonNullOrEmptyString <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Assim, podemos:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">+</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Para ultimar a brincadeira vamos sobrecarregar os seguintes operadores: menor, maior, menor-igual e maior-igual.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></code></pre>\n<p>Portanto:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">></span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">&lt;</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">>=</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">&lt;=</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"conclusão\"><a href=\"#conclus%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusão</h2>\n<p>Neste artigo foi realizado a demonstração de alguns operadores que permitem a operação de sobrecarga, no entanto, vale enfatizar que é possível também sobrecarregar outros operadores.</p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/2.%20Operator%20overloading.07cc2b7.ba3b477481d9937b079c72fced2df533.jpg","size":{"width":860,"height":708},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/2.%20Operator%20overloading.a67b0b2.ba3b477481d9937b079c72fced2df533.jpg 480w","/assets/static/2.%20Operator%20overloading.07cc2b7.ba3b477481d9937b079c72fced2df533.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 708' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4cc35b5ea4569cae799fcf7a1bd691de'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4cc35b5ea4569cae799fcf7a1bd691de)' width='860' height='708' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAA1AEADASIAAhEBAxEB/8QAHAAAAgIDAQEAAAAAAAAAAAAABQYABwECBAgD/8QAMxAAAgEDAwMCBQIEBwAAAAAAAQIDBAURABIhBjFBE1EHFCJhgXGRMmKhwRUjUlOSsfD/xAAZAQEAAwEBAAAAAAAAAAAAAAADAAIEBQH/xAAfEQACAgEFAQEAAAAAAAAAAAAAAQIRAwQSEyExQVH/2gAMAwEAAhEDEQA/AEzpszW68/M0FI9Q8EhiGz%2bEFlK5z%2b/769E9L3a3VdFT0dwjQCOMAu4%2brdwASdU78MaVoYrrVSB%2baeNBjLKTv3YJz379s6cTWWl6sQlnR92WjWYr/Xx316pUJsTVjB8ULwaZ6JLbvjjikCSSR8ApLlSD9twXXVR0E9wMUUdS7SoFaoWJgqQfy5wcsft2H40q3e71Bi2NtnHqo8Z/3QhJCt/N4zrPwoqliKwVlS5Vw2C0hwrc5JHvnOrKauirjRPiTYZZ7vbY3%2bVZhP6IO0sqhlyFYk89vYaXJ%2bkqrp9p62FGmKn1Ywq7kQjs2zx%2bdFPiDeFs3WthenmNSIYVkljnUKHJY7hj3K4%2b/bTJP1jarlHRUNroq1qqqnGfZVzzvPnGc/jnQ8kdzv0Z6dtJorq2dTGvra1b9Wimqcd%2bVAx/0dHLFd5upqKYi4NVNSF1EU3BZRzuBHfjxjnQXqrpKe7dW%2bvN6cVNJKsbAOFbHPP2z3zpkouk7L0zV/ORSKx9PYyyN48n9dNGUjO1Qw/DXpFa/opVqJzHTyt60RibG/IHLYPuO39tJ/VtFR2i5tLDgv8AUhPbdt4GPx509dL35bP0ubfNQy09xgp1RpZU2CVduQwHt489%2b%2bqb6kutXers7jIjjGfq5AH9zoMs1GNs04oOUtqHS0vFVwR/Nn04gFZXfuMdsY/9zofW11up%2boJKinkleT1NzqBtRj/qI8nSjbK1zUMxqGkEZyzMeNaVMwkuklXTjdG%2bdyP5weD%2bRg65uTVTlaXVHUhpMcacuxh6olhjdrpOxZncj1GBYhiOP0zpz%2bGdLFaaGpvd/f5P1Kc04RpF2ZPJ%2bo%2bcDHHudV0/VVNTUkSSsV%2brHC5ZTz49tH7N1VQsP8UuCwTSLF6VtppGDfKxgkFyo4EjHnPgY0ujx1Upe/pn1eX2CfX4WHfL/wBOzWBRVVMB%2bYH05TgEjAyT7aovqe5U8VyrY6O4mpTOI03FggPfnt3/AKY11dXV0N4VYJDOCh3FlPGfbnS3C9BTNimpg0wA%2bpyWII/X%2b2tzmq7ObsbLdo%2bsajq6wPY6qiaC8UVM%2b9SmN2P4Qp7jjxqtGM8NHUxem8VTKpVUbk5Pv7aB1vVl1niihSskjhhP0%2bmcN/y4OMcd9CxcKiaRi7biTnnwffR5cXJV/BcWo47SDpL29Fjq1IIO700kUgt43Y5xnXRL1Dvm9SPerbV5H6cjz9%2bdL5L1s%2bTuaRuCqjONH4umKgU6yzr6EZAIZ/bR8UIu6EefJJVfQKralZ/UcRYdzy/nWI6lyghUnbjGM67mt1O0DNE1VPtfacADA0SqHpqG3lIrfJR1rE4klXJK%2b3Pn76umvAW/ppbLXW1ZEkFLM6khQcbVz25J403WH4b112rI0mVIkliM%2b8HOFzjufOmP4T9WWODpl7fepTJU%2bl6YDrk457Z/GrKtNwp4JaalyiRm3pNkuDsG7AUt54Oljgj6%2byss8qpHjBMLExA86YqO0QJZoax/8yaVn79lCgHtqampLwoj6UjmluApmJkpp0yUPG0ke40eiMq2%2bnRp5GilO0xk/T2xqamiZH9DVgtCCoamilKIVWYcZxkkY76uI9K2m9dOYudIk22NXJIwST9/H41NTT4kifClfiD05S2a02ypo/pMgwy48H76VD1FdoLbJHHVkJKojJCgNtUYA3fvqamvJdPorI//2Q==' /%3e%3c/svg%3e"}}},"context":{}}