{"hash":"21e8d6024374c8b3453b554d6d762f3435f72b44","data":{"post":{"title":"Orientação a objetos (1) - lidando com estados sem o uso de estruturas condicionais","path":"/orientacao-a-objetos-1-lidando-com-estados-sem-o-uso-de-estruturas-condicionais/","date":"10/09/2020","tags":[{"id":"C#","title":"C#","path":"/tag/C%23/"},{"id":"Reflexão","title":"Reflexão","path":"/tag/Reflex%C3%A3o/"},{"id":"Orientação a objetos","title":"Orientação a objetos","path":"/tag/Orienta%C3%A7%C3%A3o%20a%20objetos/"}],"description":"Há quem diga dominar o paradigma orientado a objetos e há quem considere questionável esta assertiva. Em qual destes grupos você se encaixa?","content":"<h2 id=\"introdução\"><a href=\"#introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introdução</h2>\n<p>Há quem diga dominar o paradigma orientado a objetos e há quem considere questionável esta assertiva. Em qual destes grupos você se encaixa?</p>\n<p>Apesar da orientação a objetos ser imensamente afamada, pode-se exprimir que é relativamente fácil esbarrar em códigos \"orientados a objetos\" escassos de objetos. Esta escassez é frequentemente preenchida com aspectos imperativos em demasia.</p>\n<p>Permita-me, através deste artigo, expor um cenário para reflexionarmos sobre orientação a objetos.</p>\n<h2 id=\"1-cenário\"><a href=\"#1-cen%C3%A1rio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Cenário</h2>\n<p>Considere um simulador de banco em que seja possível <strong>depositar</strong>, <strong>sacar</strong>, <strong>fechar</strong>, <strong>ativar</strong> e <strong>congelar</strong> uma <strong>conta</strong>.</p>\n<ul>\n<li>Quando criada, uma conta tem seu estado valorado como ativa e seu saldo é equivalente a zero;</li>\n<li>Quando fechada, uma conta não deve realizar as operaçōes depositar e sacar, entretanto, uma conta fechada pode alterar seu estado para ativa ou congelada;</li>\n<li>Quando congelada, uma conta pode realizar as operaçōes depositar e sacar, no entanto, ao realizar algumas destas operaçōes, seu estado deve alterar para ativa. Naturalmente, uma conta congelada pode alterar seu estado para ativa ou fechada;</li>\n<li>Quando ativa, uma conta pode realizar as operaçōes depositar e sacar. Similarmente, uma conta ativa pode alterar seu estado para congelada ou fechada;</li>\n<li>Não há necessidade de validar o valor requisitado em um saque (não é foco do artigo, manteremos o mais simples possível);</li>\n</ul>\n<p><strong>Atenda os requisitos acima sem utilizar flags booleanas e estruturas condicionais</strong>.</p>\n<p>Qual a sua solução para este problema?</p>\n<h3 id=\"11-resolução\"><a href=\"#11-resolu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1 Resolução</h3>\n<p>Primeiramente, <strong>esqueça que flags, if, switch existem</strong>. Pense em objetos.</p>\n<ul>\n<li>Há três estados que uma conta pode assumir, iremos representá-los com objetos. Cada estado será um objeto;</li>\n<li>Há dois comportamentos definidos de forma explícita: depositar e sacar. Estes comportamentos variam de acordo com o estado da conta, ou seja, a implementação de cada estado ficará responsável por representar a ação esperada destes comportamentos;</li>\n<li>Há três comportamentos definidos de forma implícita: ativar uma conta, fechar uma conta e congelar uma conta. Outra vez, a implementação de cada estado ficará responsável por reproduzir estas ações;</li>\n</ul>\n<p>Seguindo estes princípios, podemos definir um contrato, o qual todo estado deve assinar:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onDeposit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onWithdraw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>A partir de então, partimos para a implementação do estado fechado:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Closed</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IState</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Active</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onDeposit<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Frozen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onWithdraw<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Activate: uma conta fechada pode alterar seu estado para ativa. Ao ativar uma conta que estava fechada, um objeto (Active) é retornado;</li>\n<li>Close: Ao \"fechar\" uma conta já fechada, nada é feito, pois a mesma já estava fechada, portanto, é retornado o próprio objeto;</li>\n<li>Deposit: uma conta fechada não deve realizar a operação de depósito, neste caso nenhum comportamento é executado, além de retornar o próprio objeto;</li>\n<li>Freeze: uma conta fechada pode alterar seu estado para congelada. Ao congelar uma conta que estava fechada, um objeto (Frozen) é retornado;</li>\n<li>Withdraw: uma conta fechada não deve realizar a operação de saque, neste caso nenhum comportamento é executado, além de retornar o próprio objeto.</li>\n</ul>\n<p>Até aqui, o que estamos usando mesmo? <strong>Objetos</strong>!</p>\n<p>Implementação do estado congelado:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Frozen</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IState</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Active</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Closed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onDeposit<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onDeposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onWithdraw<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onWithdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Activate: uma conta congelada pode alterar seu estado para ativa. Ao ativar uma conta que estava congelada, um objeto (Active) é retornado;</li>\n<li>Close: uma conta congelada pode alterar seu estado para fechada. Ao fechar uma conta que estava congelada, um objeto (Closed) é retornado;</li>\n<li>Deposit: uma conta congelada pode realizar a operação de depósito, entretanto, ao realizar esta operação, seu estado deve alterar para ativa. Portanto, após a ação ser feita, um objeto (Active) é retornado;</li>\n<li>Freeze: Ao \"congelar\" uma conta já congelada, nada é feito, pois a mesma já estava congelada, portanto, é retornado o próprio objeto;</li>\n<li>Withdraw: uma conta congelada pode realizar a operação de saque, entretanto, ao realizar esta operação, seu estado deve alterar para ativa. Portanto, após a ação ser feita, um objeto (Active) é retornado;</li>\n</ul>\n<p>Implementação do estado ativo:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Active</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IState</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Closed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onDeposit<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onDeposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Frozen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onWithdraw<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onWithdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Activate: Ao \"ativar\" uma conta já ativa, nada é feito, pois a mesma já estava ativa, portanto, é retornado o próprio objeto;</li>\n<li>Close: uma conta ativa pode alterar seu estado para fechada. Ao fechar uma conta que estava ativa, um objeto (Closed) é retornado;</li>\n<li>Deposit: uma conta ativa pode realizar a operação de depósito;</li>\n<li>Freeze: uma conta ativa pode alterar seu estado para congelada. Ao congelar uma conta que estava ativa, um objeto (Frozen) é retornado;</li>\n<li>Withdraw: uma conta congelada pode realizar a operação de saque;</li>\n</ul>\n<p>Enfim, isto feito, podemos codificar a nossa conta:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Amount</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">decimal</span></span> Value \n        <span class=\"token operator\">=></span> _value<span class=\"token punctuation\">;</span> \n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> _value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Amount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _value <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">Amount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> amount<span class=\"token punctuation\">)</span> \n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Amount</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">decimal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span> \n        <span class=\"token operator\">=></span> amount<span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">LessThanOrEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _value<span class=\"token punctuation\">.</span><span class=\"token function\">LessThanOrEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Balance</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">decimal</span></span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> balance<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> Value <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> balance<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Balance</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">decimal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Balance</span> balance<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> balance<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Balance</span> <span class=\"token function\">Increase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Balance</span><span class=\"token punctuation\">(</span>Value <span class=\"token operator\">+</span> amount<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Balance</span> <span class=\"token function\">Decrease</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Balance</span><span class=\"token punctuation\">(</span>Value <span class=\"token operator\">-</span> amount<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">GreaterOrEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> amount<span class=\"token punctuation\">.</span><span class=\"token function\">LessThanOrEqualTo</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Balance</span> Balance <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">IState</span> _state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Amount<span class=\"token punctuation\">></span></span> _deposit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Amount<span class=\"token punctuation\">></span></span> _withdraw<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_state <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Active</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_deposit <span class=\"token operator\">=</span> amount <span class=\"token operator\">=></span> Balance <span class=\"token operator\">=</span> Balance<span class=\"token punctuation\">.</span><span class=\"token function\">Increase</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_withdraw <span class=\"token operator\">=</span> amount <span class=\"token operator\">=></span> Balance <span class=\"token operator\">=</span> Balance<span class=\"token punctuation\">.</span><span class=\"token function\">Decrease</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n    \n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _state<span class=\"token punctuation\">.</span><span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _state<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _state<span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _state<span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">_deposit</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _state<span class=\"token punctuation\">.</span><span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">_withdraw</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>IState<span class=\"token punctuation\">></span></span> onChange<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _state <span class=\"token operator\">=</span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>A magia está presente na orquestração de estado, onde um objeto do tipo Account se comunica com um objeto do tipo IState, através de uma abordagem polimórfica.</p>\n<p>Considerando que cada estado (objeto) mantém os próprios comportamentos, é necessário, portanto, apenas instrumentar a troca de estado (objeto) mediante ao objeto do tipo Account.</p>\n<p>Na prática o uso deste objeto poderá ser feito da seguinte maneira:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> balance <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// starts as active account</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 200</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 500</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// it turns to close, so it cannot deposit or withdraw</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// do nothing</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// do nothing</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// it turns to freeze, so it will turn to active if deposit or withdraw </span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1000 then turn to active </span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// it turns to freeze, so it will turn to active if deposit or withdraw </span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// it turns to close, so it cannot deposit or withdraw</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// do nothing</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3000 </span>\n    <span class=\"token punctuation\">.</span>Balance\n    <span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3000</span></code></pre>\n<h2 id=\"palavras-finais\"><a href=\"#palavras-finais\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Palavras finais</h2>\n<p>Quão orientado a objetos é o código que tu escreves? Você acredita realmente tirar um bom proveito dos recursos que a orientação a objetos prove para ti?</p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/Lidando%20com%20estados%20sem%20o%20uso%20de%20estruturas%20condicionais.07cc2b7.462f5c320475569e32ac013be052619d.jpeg","size":{"width":860,"height":572},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/Lidando%20com%20estados%20sem%20o%20uso%20de%20estruturas%20condicionais.a67b0b2.462f5c320475569e32ac013be052619d.jpeg 480w","/assets/static/Lidando%20com%20estados%20sem%20o%20uso%20de%20estruturas%20condicionais.07cc2b7.462f5c320475569e32ac013be052619d.jpeg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 572' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3cf74d91d8640e89ae433f348615928f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3cf74d91d8640e89ae433f348615928f)' width='860' height='572' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAArAEADASIAAhEBAxEB/8QAGgAAAwADAQAAAAAAAAAAAAAABAUGAAMHAv/EACwQAAIBAwMCBQQDAQEAAAAAAAECAwAEEQUSIRMxBiJBYXEjMlGBkcHhYqH/xAAYAQADAQEAAAAAAAAAAAAAAAABAwQCAP/EACERAAICAAcAAwAAAAAAAAAAAAECABEDBBIhMUFRInGB/9oADAMBAAIRAxEAPwAeKRUjdiwC7RsT1omKctaM7jkRtnynKjHbFZE8QtXbZ5FH3MeeO2K8lzBpxDZG8khj3yfSgCQRARCmj26fD1MsVgVQF9/WjtAtTfXhRWdE6ZZpNpYRgfFT91csztCu5/oqdoPfAOaP0WWSSxdIriWGQbS4jYqQBkYz6jmtl9W0C0DZ4hzQRwao9rK0TovnhYAgvxyQDzisuFSOG4jCth/PhB2z3rdqMF90obyCOAmKNY0a4QkuvJPmHbH5r1dCKVm6McwVkjZi/wBhJUnCsPuHBoBgSyjqaZNIVj3FOnSvIkYyfKTv39/agdVRzbyruJVgdpHoc1RoixxcKvPlH6oK8iV4QVVWOQOPTFAKagv2KZJ4l0yZJo%2bmXO1SzjGT%2bPetd5OBp1qoBMU5AGWycjtmkFpK19OA5YlcbAMDHzRt6GMMChidp7k8Ul3o1OHsd21hNrKNYpJBZonLXchIWIZwBxyc9sU4sdGGmvP0LoXluFaGSVVZcSKwBHmGf6pTe6naWcFpBaWzJuId5ZXDM75/HYe1Umnas%2boxvbv2dSwyP2KfltJJDfkzmKVRpP3JbxjFfmaSXT7q7j6QUyxLIWVgVGTtz6UX4f1SSexubGdt6RoGRz7eo/8AaY6nAo1aZi2EZIyVHr5R3/ip3QENrrd/aE/SJOwfjIP%2bU5BTsBzuIpmJVb4EoocGHaqsQorU4KRuCAuPSvcTsEzGwIIrRctmLzYJxzzSVPYjiL5nLtIuQr7VYeZc7s8jFPFkC2cC7vquxOOal/CpzKc89hzVbsUiJscg8c1NiLvCDtN8l0ZoG6uDtI4C4Px71d6TYG1eyQqQyQrvP/RGSP1nFSWh2kF34g0%2bO4j6kfXU7STgnvz%2bxXQbclr6bdzlST81ZkU5YybMsdhEPiGVYtQJOFPQUn%2bDSMuqeJoR3yE3H5H%2b10LxFpNjc%2bFbi9mt1a6iG1JQSCB%2bDg8j5rlussY/EbsnBD8H4piKcPELHuYxmvDFR3HJ0gyBsmMlMAc98ULPLIjHBJVuCCe3vWak7LrEyqcKW3ED8kAmkOoyydYec8j%2b6gNoxA6lw%2bS3P//Z' /%3e%3c/svg%3e"}}},"context":{}}