{"hash":"5b43b2cc1df3a29170d895e8bea93ad5b1812c4b","data":{"post":{"title":"Obsessão por tipos primitivos","path":"/obsessao-por-tipos-primitivos/","date":"01/10/2019","tags":[{"id":"C#","title":"C#","path":"/tag/C%23/"},{"id":"Reflexão","title":"Reflexão","path":"/tag/Reflex%C3%A3o/"}],"description":"O conceito de obsessão por tipos primitivos é auto-explicativo: uso excessivo de tipos primitivos. Parece ser algo notório, mas apenas parece.","content":"<h2 id=\"1-introdução\"><a href=\"#1-introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Introdução</h2>\n<p>O conceito de obsessão por tipos primitivos é auto-explicativo: uso excessivo de tipos primitivos. Parece ser algo notório, mas apenas parece. </p>\n<p>A obsessão por tipos primitivos nasce em momentos de obscurantismo e somente nos cientificamos de sua existência após cometer os mesmos equívocos incomensuráveis vezes.</p>\n<h2 id=\"2-cenário\"><a href=\"#2-cen%C3%A1rio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Cenário</h2>\n<p>Para ilustrar o tema criaremos uma classe chamada Account para simbolizar uma conta de acesso.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>Para cadastrar uma conta no nosso sistema hipotético definiu-se que:</p>\n<ul>\n<li>Uma conta de acesso deve conter um nome de usuário;</li>\n<li>Uma conta de acesso deve conter um email;</li>\n<li>Por fim, uma conta de acesso deve conter uma senha.</li>\n</ul>\n<p>Em seguida, nós temos a fabulosa ideia de criar todas essas propriedades como strings.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> \n<span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> email<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n        Email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n        Password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Username <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Email <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Password <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Até aí tudo bem, disse o frango na porta do forno _(ヅ)_/</p>\n<p>“Nome de usuário, email e senha são representações textuais, logo são strings”. Acontece que o mundo gira e vacilão roda. Senha não é uma representação textual qualquer, existem critérios que podem categorizá-la como valida ou invalida, segura ou insegura, da mesma forma que existem premissas que um email deve seguir.</p>\n<p>Veja só, a bola de lama que a nossa classe está se tornando:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> \n<span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> email<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// validate username</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Regex<span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Too lazy to write a regex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// validate password</span>\n\n        Username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n        Email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n        Password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ops, começamos a ter código duplicado, afinal precisamos validar o email novamente caso haja alguma tentativa de alterá-lo.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ChangeEmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> email<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Regex<span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Too lazy to write a regex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Parece que email não é simplesmente um texto, não é mesmo? </p>\n<h3 id=\"então-o-que-podemos-mudar\"><a href=\"#ent%C3%A3o-o-que-podemos-mudar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Então, o que podemos mudar?</h3>\n<p>Eu vejo algumas alternativas:</p>\n<ul>\n<li>Criar um helper para centralizar a lógica de validação de email e senha em métodos específicos (nope);</li>\n<li>Criar métodos de extensão para que a string passe a conter os métodos de validação de email e senha (nope);</li>\n<li>Criar uma classe chamada AccountValidator a qual será responsável por validar uma Account (nope).</li>\n</ul>\n<p>E o que todas essas abordagens têm em comum? Elas assumem que não é responsabilidade da classe Account validar um email. E neste ponto eu concordo, realmente não acho que seja responsabilidade dela validar um email, porém algo muito importante está passando despercebido: </p>\n<blockquote>\n<p>Desde quando é responsabilidade de uma string representar um email?</p>\n</blockquote>\n<p>Estamos usando uma linguagem que trabalha com o paradigma orientado a objetos, então por que estamos tão obcecados em usar os tipos primitivos? Bora orientar o nosso código! </p>\n<p>Tudo o que precisamos fazer é criar um modelo de Email para dispor desta responsabilidade, além disso, podemos usufruir dos operadores implícitos para facilitar a criação dos objetos do tipo Email.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Email</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Email <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _value <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> Email <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Email</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> email<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Regex<span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Too lazy to write a regex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Email</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>E assim preservamos a simplicidade para criar um email.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Email</span> email <span class=\"token operator\">=</span> <span class=\"token string\">\"operator@implicito.com\"</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Pronto, temos uma representação de um email que se preocupa com as responsabilidades de um email. Doravante, a classe Account encarrega-se somente em ratificar se o email é nulo.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> Account <span class=\"token punctuation\">(</span><span class=\"token class-name\">Username</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Email</span> email<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Password</span> password<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>   \n    Username <span class=\"token operator\">=</span> username <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Username cannot be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Email <span class=\"token operator\">=</span> email <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email cannot be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Password <span class=\"token operator\">=</span> password <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Password cannot be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"palavras-finais\"><a href=\"#palavras-finais\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Palavras finais</h2>\n<p>A classe Account passa a ficar menos carregada e nosso código começa a ganhar mais semântica.</p>\n<p>Outros exemplos comuns de obsessão por tipos primitivos: CPF, CNPJ, IP, CEP e por ai vai.</p>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/3.%20Obsess%C3%A3o%20por%20tipos%20primitivos.07cc2b7.47f730cbf75a60d7b9cd3c8e459e4a48.jpg","size":{"width":860,"height":574},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/3.%20Obsess%C3%A3o%20por%20tipos%20primitivos.a67b0b2.47f730cbf75a60d7b9cd3c8e459e4a48.jpg 480w","/assets/static/3.%20Obsess%C3%A3o%20por%20tipos%20primitivos.07cc2b7.47f730cbf75a60d7b9cd3c8e459e4a48.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 574' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-39c85ac8c7ce9e1e5fe3d49af7f95911'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-39c85ac8c7ce9e1e5fe3d49af7f95911)' width='860' height='574' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAArAEADASIAAhEBAxEB/8QAGQAAAwEBAQAAAAAAAAAAAAAABAUGAwIH/8QALhAAAgIBAwIFBAIBBQAAAAAAAQIDBBEAEiEFMRMiQVFhBhRxkTKBIyQzQkOh/8QAGQEAAwEBAQAAAAAAAAAAAAAAAgMEAQAF/8QAIBEAAgICAgMBAQAAAAAAAAAAAQIAEQMhEkETIjEEUf/aAAwDAQACEQMRAD8A8MpEdTV4Z1Kb2DEqeCM8AH9acJ9JmZN9Moqgebf2zpXSqzxQzLSdLMbDcUfiWIAegH8x%2bP1o6r1m9c/0ME22tGMtKi8sPQfGlkX9iSrA8h8gorv0lmIhKMG83mzxoKWx1CSRmiJcyEDA/wCKjTuGuDFOtpfE825Wz6AdtbPYq0ehyitA7E8SSOMGQ%2bp/HxoPYaJjcaBjyO5ORV71m/sgnEKL/OTOCo9vnWj9IrzLJNCJ7eOGkdgo3f3oulFVt2AZIPOxDbMsOBjn20V1R4YesR0atZ4wcCQbsrz8e2uYNcpVRj6u5P2Olmv/AJkgj2MpGQ4fQt%2bkft1sb9w4QKOcafdRpwU5pdyjwcgBgCoBbPl/WuZ66wpBUrxEsqtKWLcYHv8AgnWoDe5JkzoxBUQH71rJT7aJywOVEQJb%2byO2m9e6fuGS6kUdns7p6%2b289ifn96nK8t%2bORlaJ0VlI2CMqv5GiYukW7cHjbXMUTebYhPJ76ZdHcb41CcTKhrlRFHiNkBwHUgh8fA7f3nWV6KnI0kcCNFC7FljaTcce2kcFaeSmy%2bGU2jIJ48vocf1renWskC/PBI9NX/yEe2l5W3QlX5sKILr7KvqH09L0av0efxWLXlLuFGTGvp/566mLNHxrPjw2W4lK%2bJKfjvjTm/bv3Ltu5bsxSQSKEhWN9uxQPIqqfbWPTlfrRrRw1lVN%2bzw9mNxHc59fnQmybU6jjQWiNzOOBkpNFYuPOikd1BCnuNBdUEkatZLxl/BOAB/HnJOqD6u6TN0SBTK%2b5nk2eUAgKPXjtk9h7ajprcc9coyeU43D39%2bffRK88hvyuns0JpTVLEEsFFLayxJ4oJmIBAIyOOcYyedNoerzRwCW9JLBGgHkicjcQOx55z7DSD6bPh9ehiQBYzuUgDuPY646tI8tiOORiUVVIHsT308ADcpZidw9epSyyy2VUu7/AO6ox5QR5QPgDXF%2bz1SxHJVrCSKg5G1RwCcZwc/jOu/qGNK9WJIFEalFJ2DBJx6n10Nve1Tjjnd3SIYRdxwOBpSr7Fv7KGYhQh6mVJTZsVYJJt6O%2bwbjhlI4xxxqv%2bnb0v051KaWalJJFASkPinAXvl8jORx66mOnRIOp1CFAMdoKuB2GM6NRmsU7zzMWZpFJOee2sGm49VMd%2bCeTu4N1zr9vqfULVy1ZeNJWzsj2BR7Dk89tJwK0su%2bVrBB/wCzcDg/AHGnroqwBQAQA2M8n9nUezFmYE8buw4GjCjqTrn8h3P/2Q==' /%3e%3c/svg%3e"}}},"context":{}}