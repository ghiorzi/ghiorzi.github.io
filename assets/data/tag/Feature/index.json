{"hash":"555e1be2ae31565c2eecdca8b5fb650c6a3f8a3c","data":{"tag":{"title":"Feature","belongsTo":{"edges":[{"node":{"title":"LINQ (1) - Lazy evaluation","path":"/linq-1-lazy-evaluation/","date":"04/01/2021","timeToRead":5,"description":"Conhecimento em LINQ é mandatório para qualquer pessoa que resolva se aventurar no universo C#. À primeira vista, LINQ assemelha ser meramente mais um dos instrumentos da linguagem, contudo, em virtude dele, coleções tornam-se expressivamente profícuas.","content":"<h2 id=\"introdução\"><a href=\"#introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introdução</h2>\n<p>Conhecimento em <strong>LINQ</strong> é mandatório para qualquer pessoa que resolva se aventurar no universo C#. À primeira vista, <strong>LINQ</strong> assemelha ser meramente mais um dos instrumentos da linguagem, contudo, em virtude dele, coleções tornam-se expressivamente profícuas. <strong>LINQ</strong> trás consigo um conjunto de features valorosas, dentre elas: manipular objetos em memória, manipular xml e até mesmo manipular queries em banco de dados. De fato, <strong>LINQ</strong> é encantador! Todavia, como toda abstração, é importante atentar alguns pormenores.</p>\n<h2 id=\"1-enumerable\"><a href=\"#1-enumerable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Enumerable</h2>\n<p><strong>Enumerable</strong> é um dos diversos recursos de coleção à disposição no C#. Para compreender o <strong>LINQ</strong> de modo correto é primordial que, antes de tudo, entenda-se mais sobre o <strong>Enumerable</strong>.</p>\n<p><strong>Enumerable</strong> é uma coleção read-only, ou seja, não é possível efetuar operações de escrita como adicionar ou remover um elemento. Porém, este não é seu único aspecto.</p>\n<p><strong>Enumerable is lazy!</strong> Quando alguma operação é produzida em um <strong>Enumerable</strong>, os registros não são carregados na memória. Isto porque as operações não são materializadas de imediato, afinal o <strong>Enumerable</strong> é preguiçoso.</p>\n<h3 id=\"11-deferred-query-execution\"><a href=\"#11-deferred-query-execution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1. Deferred query execution</h3>\n<p>Deferred query execution (lazy evaluation) é indubitavelmente um dos conceitos mais significativos do <strong>LINQ</strong>, visto que sem este mecanismo, <strong>LINQ</strong> desempenharia de maneira insatisfatória.</p>\n<p>Para ilustrar esta concepção, tomaremos como exemplo o simples trecho de código a seguir:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// 1. Dado um conjunto de números de 1 a 10</span>\n<span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. Busque apenas os números pares contidos em numbers</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> evenNumbers <span class=\"token operator\">=</span>\n    numbers<span class=\"token punctuation\">.</span>\n        <span class=\"token comment\">// 3. Onde number obrigatóriamente seja divisível por 2</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">=></span> number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 4. Destes, obtenha somente os 3 primeiros</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// 5. Materialize em uma lista</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>As funções <strong>Where</strong> e <strong>Take</strong>, vulgo <strong>query operators</strong>, efetuam ações de consulta na etapa 3 e 4, respectivamente. O enigmático, no entanto, é que estas ações são concretizadas verdadeiramente no quinto estágio, quando há materialização dos dados. Em outras palavras, enquanto não houver materialização, os registros não são conduzidos para a memória.</p>\n<p>Para ratificar que o <strong>Enumerable</strong> atua sob demanda, podemos realizar uma experimentação elementar: implementar um <strong>Enumerable</strong>.</p>\n<h2 id=\"2-sequences\"><a href=\"#2-sequences\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Sequences</h2>\n<p><strong>IEnumerable</strong> é uma interface, portanto, é praticável implementá-lo. A implementação de um <strong>IEnumerable</strong> é denominada como <strong>Sequence</strong>. <strong>Sequence</strong>, diferente de <strong>List</strong>, comporta somente operações de leituras. Por derivar-se de um <strong>IEnumerable</strong>, <strong>Sequences</strong> beneficiam-se de <strong>lazy evaluation</strong>.</p>\n<h3 id=\"21-experimento\"><a href=\"#21-experimento\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.1 Experimento</h3>\n<p>Como experimento, criaremos um <strong>Sequences</strong>. Nosso Sequence será responsável por carregar números pares. Simples, não?</p>\n<p>Iremos lidar com números inteiros, logo, implementaremos um IEnumerable<int>:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EvenNumbers</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">EvenNumbersEnumerator</span> _enumerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">EvenNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _enumerator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">EvenNumbersEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _enumerator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">IEnumerator</span> IEnumerable<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _enumerator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Perceba que, além do <strong>IEnumerable</strong>, há mais um integrante na jogada. <strong>Enumerator</strong> é um constitutivo primacial, incumbido por gerar uma sequência de valores. Há uma particularidade, entretanto. Em vez de conceber uma coleção com todos os valores de imediato, o <strong>Enumerator</strong> disponibiliza os valores individualmente de forma preguiçosa.</p>\n<p>Este mecanismo propicia que os primeiros valores auferidos sejam processados in continenti, sem a compulsoriedade de conter todos os elementos.</p>\n<p>Assim sendo, devemos da mesma forma, implementar um <strong>Enumerator</strong>:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EvenNumbersEnumerator</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Current <span class=\"token operator\">=></span> _current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> IEnumerator<span class=\"token punctuation\">.</span>Current <span class=\"token operator\">=></span> _current<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _current <span class=\"token operator\">=</span> _current <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _current <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> GC<span class=\"token punctuation\">.</span><span class=\"token function\">SuppressFinalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>O ponto-chave é a função MoveNext</strong>. Em síntese, enquanto houver valores para serem iterados, o cursor se moverá <strong>sequencialmente</strong> para o elemento sucessor. No tocante ao nosso cenário, não há delimitação para o final da sequência. Isto posto, o incremento ocorrerá sem restringimento.</p>\n<p>Contudo, algo a se observar é que enquanto o MoveNext não for invocado, não haverá valor para ser iterado. Por conseguinte, o \"valor inicial\" será 0, mas para legitimar essa declaração iremos percorrer a sequência de modo inusual.</p>\n<h3 id=\"22-iterator\"><a href=\"#22-iterator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.2 Iterator</h3>\n<p>Habitualmente, iteramos sequências através do foreach. Porém, para entendermos o fluxo do <strong>Enumerator</strong>, iremos seguir uma abordagem \"mais manual\":</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> evenNumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">EvenNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. Obtemos o Enumerator</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> enumerator <span class=\"token operator\">=</span> evenNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2. Retornará 0, pois o MoveNext ainda não foi chamado</span>\n    <span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>enumerator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3. Moveremos o cursor para o próximo valor</span>\n    enumerator<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4. Exibirá o número 2</span>\n    <span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>enumerator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 5. Moveremos o cursor para o próximo valor</span>\n    enumerator<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 6. Exibirá o número 4 e assim sucessivamente</span>\n    <span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>enumerator<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Note que, a partir da nossa <strong>Sequence</strong> (EvenNumbers), obtemos o <strong>Enumerator</strong> (EvenNumbersEnumerator). E dai a diante temos acesso aos valores da sequência. Enquanto o MoveNext não é chamado, o valor 2 não será retornado, da mesma forma que o valor 4 será retornado somente após o MoveNext ser chamado após o cursor estar apontado para o valor 2.</p>\n<p>Por baixo dos panos, o que ocorre ao usarmos o foreach é o seguinte:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> enumerator <span class=\"token operator\">=</span> evenNumbers<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>enumerator<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Trecho dentro do foreach</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Entretanto, como não demarcamos um valor final para a nossa Sequence, cairíamos em um loop infinito.</p>\n<p>Enfim, para ratificar o <strong>lazy evalution</strong>, usaremos o <strong>Sequence</strong> que acabamos de criar:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> evenNumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">EvenNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nevenNumbers\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Isto feito, podemos fazer o teste:</p>\n<ul>\n<li>Na função MoveNext, deixe um breakpoint na linha em que o valor é atribuído para _current;</li>\n<li>Em seguida, remova o ToList do chaining. Ao fazer isso, não haverá materialização dos dados, consequentemente, o MoveNext não será chamado;</li>\n<li>Adicione novamente o ToList e perceba que a partir de então o MoveNext será chamado.</li>\n</ul>\n<p>Ou seja, podemos configurar como queremos filtrar o nosso <strong>Sequence</strong> e apenas quando precisarmos realmente dos dados, eles serão carregados na memória. <strong>Isto, é claro, se nenhuma materialização ser efetuada de modo indevido</strong>. Fantástico, concorda?</p>\n<h2 id=\"3-query-operators\"><a href=\"#3-query-operators\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Query operators</h2>\n<p>Como já visto, podemos efetuar operações de leitura em <strong>Sequences</strong>, mas como os operadores satisfazem o preceito de <strong>lazy evaluation</strong>? </p>\n<p>Para entendermos melhor, que tal implementarmos um operador chamado <strong>Filter</strong> que fará essencialmente o mesmo que o <strong>Where</strong>?</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Método de extensão com comportamento similar ao Where</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">Filter</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Predicate<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> predicate<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> element <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Em suma, iteramos um Sequence elemento por elemento, validamos se o elemento vigente corresponde ao predicado e caso o mesmo satisfaça a condição, o elemento é então retornado.</p>\n<p>Como está sendo usado um foreach, os dados, portanto, estão sendo materializados, correto? Nope. Primeiramente, repare que, apesar do operador Filter retornar um IEnumerable, \"não está sendo retornado\" uma sequência de elemento dentro de seu escopo. Na verdade, está. Porém, aos poucos.</p>\n<h3 id=\"31-yield-return\"><a href=\"#31-yield-return\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3.1 Yield return</h3>\n<p>Sumariamente, <strong>yield return</strong> é um <strong>syntax sugar</strong> designado para orquestrar a execução do fluxo mediante um estado alusivo ao cursor vigente em um <strong>Enumerable</strong>. Em outros termos, <strong>yield</strong> torna sua aplicação \"inteligente\" suficientemente para saber em que parte do <strong>Enumerable</strong> o cursor parou e que em algum momento a execução deve retomar a partir deste mesmo ponto. Desta forma, não há problema em retornar um elemento por vez.</p>\n<h2 id=\"palavras-finais\"><a href=\"#palavras-finais\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Palavras finais</h2>\n<p>Para finalizar, é importante recapitular o que vimos aqui:</p>\n<ul>\n<li><strong>Lazy evaluation</strong> permite que a execução seja efetuada apenas quando os dados são requisitados;</li>\n<li><strong>LINQ</strong> só é viável graças ao <strong>lazy evaluation</strong>;</li>\n<li>Criar <strong>Sequences</strong> customizados promove flexibilidade, afinal seu objeto desfrutará de lazy evalution e, por consequência, terá acesso aos recursos do <strong>LINQ</strong>;</li>\n<li>Materializar um ou mais <strong>Sequences</strong> de modo indevido seguramente trará dor de cabeça.</li>\n</ul>\n"}},{"node":{"title":"Pandemonium - uma breve reflexão sobre expressividade","path":"/pandemonium-uma-breve-reflexao-sobre-expressividade/","date":"10/08/2020","timeToRead":5,"description":"Inteligibilidade é comumente negligenciada quando estamos dando nossos primeiros passos no mundo da programação. Manifeste-se, por favor, quem em nenhuma circunstância declarou variáveis desprovidas de semântica.","content":"<h2 id=\"introdução\"><a href=\"#introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introdução</h2>\n<p>Inteligibilidade é comumente negligenciada quando estamos dando nossos primeiros passos no mundo da programação. Manifeste-se, por favor, quem em nenhuma circunstância declarou variáveis desprovidas de semântica.</p>\n<p>Há muito tempo debate-se sobre código de fácil entendimento. No entanto, sempre houveram pormenores que me incomodavam, dentre eles a negação (!).</p>\n<p>A princípio, declarações com negação parecem abnóxias. Contudo, não é preciso ir muito longe para transformar o nosso código em um pandemônio. Deste preceito, surgiu a minha vontade de desenvolver uma biblioteca .NET: <a href=\"https://github.com/ghiorzi/Pandemonium\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pandemonium</a>.</p>\n<h2 id=\"1-livre-se-da-negação\"><a href=\"#1-livre-se-da-nega%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Livre-se da negação</h2>\n<p>Há alguns meses eu havia escrito um artigo sobre métodos de extensão, nele eu exponho meu ponto de vista sobre negação: \"Acredito que, por questão semântica, toda verificação booleana deva ser auferida tanto por um comportamento que ratifica o caso verdadeiro quanto por um comportamento que certifica o caso falso\".</p>\n<p>Pois bem, vamos por em pratica outro exemplo, o famigerado Any negado.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> names <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Hachiman\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Yukino\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// from !Any</span>\n<span class=\"token operator\">!</span>names<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=></span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"Yui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// to None</span>\nnames<span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=></span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"Yui\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// from !</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// to</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">False</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>É comum que não haja comportamentos antagônicos para ratificações booleana, o que nos induz a negar o código. Ao meu ver, None (disponivel no Pandemonium) é notóriamente mais explícito que !Any.</p>\n<p>Ok, porém creio que expressividade pode ir além disso...</p>\n<h2 id=\"2-amplie-a-expressividade-através-de-variáveis\"><a href=\"#2-amplie-a-expressividade-atrav%C3%A9s-de-vari%C3%A1veis\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Amplie a expressividade através de variáveis</h2>\n<p>Parece ser uma pratica universal evadir o uso de variáveis booleanas quando lida-se com estruturas condicionais. Para refletirmos, imagine que precisamos verificar se um cliente pode pagar o preço promocional em um produto qualquer, assumindo ao menos um dos seguintes critérios para tal:</p>\n<ul>\n<li>O cliente tem menos de 10 anos;</li>\n<li>O cliente tem mais de 60 anos;</li>\n<li>O cliente faz aniversário na data da compra.</li>\n</ul>\n<p>Não ligue para os critérios, apenas se importe que temos três condicionais aqui.</p>\n<p>Uma forma para representar a condicional é a seguinte:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> customer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ichinose\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DateTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    customer<span class=\"token punctuation\">.</span><span class=\"token function\">CalculateAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">||</span>\n    customer<span class=\"token punctuation\">.</span><span class=\"token function\">CalculateAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">60</span> <span class=\"token operator\">||</span>\n    customer<span class=\"token punctuation\">.</span>Birthday<span class=\"token punctuation\">.</span>Date <span class=\"token operator\">==</span> DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Poderíamos mudar para:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> customer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ichinose\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token function\">January</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> customerAge <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span><span class=\"token function\">CalculateAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> customerIsUnder10YearsOld <span class=\"token operator\">=</span> customerAge <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> customerIsOver60YearsOld <span class=\"token operator\">=</span> customerAge <span class=\"token operator\">></span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isCustomerBirthdayToday <span class=\"token operator\">=</span> customer<span class=\"token punctuation\">.</span>Birthday<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">Today</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> applyPromotionalPrice <span class=\"token operator\">=</span>\n    customerIsUnder10YearsOld <span class=\"token keyword\">or</span>\n    customerIsOver60YearsOld <span class=\"token keyword\">or</span>\n    isCustomerBirthdayToday<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>applyPromotionalPrice<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Tudo bem, eu admito que o código ficou consideravelmente maior, mas preste atenção na expressividade deste trecho:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> applyPromotionalPrice <span class=\"token operator\">=</span>\n    customerIsUnder10YearsOld <span class=\"token keyword\">or</span>\n    customerIsOver60YearsOld <span class=\"token keyword\">or</span>\n    isCustomerBirthdayToday<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>applyPromotionalPrice<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>O quanto de conhecimento de programação esse trecho envolve? Praticamente nada, é possível entender que o bloco do if será somente executado para o caso de preço promocional. Por que? Porque as variáveis estão carregando semântica, está próximo da <strong>linguagem humana</strong>.</p>\n<p>O cliente tem menos de 10 anos <strong>ou</strong> o cliente tem mais de 60 anos <strong>ou</strong> é aniversario do cliente. <strong>Está literalmente escrito desta forma</strong>. Da maneira anterior, temos que \"resolver\" uma álgebra booleana, enquanto do modo atual temos que \"interpretar\" uma \"frase\", graças as variáveis booleanas.</p>\n<blockquote>\n<p>Não sou favorável a deixar as regras \"soltas\" como nos códigos acima, poderíamos seguir por outras linhas, tais como: declarar os comportamentos num modelo ou usar Specification Pattern;</p>\n</blockquote>\n<h2 id=\"3-aproxime-se-da-linguagem-humana\"><a href=\"#3-aproxime-se-da-linguagem-humana\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Aproxime-se da linguagem humana</h2>\n<p>Você pode programar em C#, JavaScript, Dart, Ruby, Python, Java, etc. Ainda que a gente não use a mesma linguagem de programação, temos um ponto em comum bem forte: <strong>falamos a mesma língua</strong>.</p>\n<p>Tomarei liberdade para interpretar o papel de Mr. Obvious aqui. Se um código deve ser entendido por todos, por que não refletimos um pouquinho sobre como nos comunicamos com a nossa língua?</p>\n<p>Peça para um desenvolvedor C# criar a seguinte data: 31 de dezembro de 2020. Você terá algo similar a este código:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DateTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Não é difícil de entender qual é data olhando para o código, mas será que uma pessoa sem conhecimento prévio em programação conseguiria entender? Talvez sim, talvez não.</p>\n<p>Agora, vejamos como podemos deixar isso pouquinho mais claro:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> date <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">.</span><span class=\"token function\">December</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>E ai, não está mais próximo da linguagem humana? Eu acredito que está claro o suficiente para qualquer pessoa entender, mesmo que nunca tenha programado.</p>\n<p>Ainda se tratando sobre tempo:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// from</span>\n<span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DateTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// to</span>\n<span class=\"token number\">31</span><span class=\"token punctuation\">.</span><span class=\"token function\">December</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// from </span>\nTimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// to</span>\n<span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token function\">Milliseconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// from</span>\nTimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// to</span>\n<span class=\"token number\">30</span><span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// from</span>\nTimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// to</span>\n<span class=\"token number\">15</span><span class=\"token punctuation\">.</span><span class=\"token function\">Minutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// from</span>\nTimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// to</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span><span class=\"token function\">Hours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// from</span>\nTimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// to</span>\n<span class=\"token number\">7</span><span class=\"token punctuation\">.</span><span class=\"token function\">Days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"4-evite-declarações-condicionais-triviais-com-funções-de-alta-ordem\"><a href=\"#4-evite-declara%C3%A7%C3%B5es-condicionais-triviais-com-fun%C3%A7%C3%B5es-de-alta-ordem\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Evite declarações condicionais triviais com funções de alta ordem</h2>\n<p>\"De vez em sempre\" nos deparamos com fluxos mais simples que resultam em basicamente um if-else:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> \n    <span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text is required\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Nestes casos de condicionais triviais, eu prefiro outra abordagem:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\ntext\n    <span class=\"token punctuation\">.</span><span class=\"token function\">NotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Otherwise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"5-use-funções-de-alta-ordem-para-remover-valores-de-uma-string\"><a href=\"#5-use-fun%C3%A7%C3%B5es-de-alta-ordem-para-remover-valores-de-uma-string\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Use funções de alta ordem para remover valores de uma string</h2>\n<p>Ah, quem nunca foi ingênuo de usar o replace sem dó ou concatenar strings como se não houvesse amanhã?</p>\n<p>Lembro como se fosse ontem, um trabalho de faculdade em que meu código estava demorando cerca de 10 minutos para guardar uma serie de valores de ordenação, simplesmente por não usar String builder. Após entender o motivo e concertar a cagada, o código passou a ser executado instantaneamente. Não concatene strings em laços com milhões de interações, talvez não seja performático, talvez.</p>\n<p>Em resumo, caso você não esteja ciente, <strong>strings são imutáveis</strong>. Isso não quer dizer que você não possa reatribuir um valor numa variável do tipo string, ou que você não possa concatenar ou substituir parte de uma string. Quer dizer que sempre que você \"alterar\" uma string, você está alocando mais uma em memória, essa era a causa do meu código estar lento, milhões de instancias estavam sendo alocadas durante a execução.</p>\n<p>Esse cenário ocorria para o caso de concatenação, entretanto, o mesmo pode ocorrer quando usamos o replace, pois o replace retorna uma nova string, afinal string é imutável.</p>\n<p>Então ao invés de fazer isso:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span>\n    <span class=\"token string\">\"123 text\"</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Podemos fazer isso:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token string\">\"123 text\"</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">Letter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">Whitespace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Na pratica será feita apenas uma alocação de string, mesmo que ocorra mais de uma substituição, pois um predicado pode conter mais de um critério de remoção e a instância só é criada após o predicado ser aplicado, portanto um critério de remoção ou 300 irão resultar em uma instância da mesma forma, diferente do replace.</p>\n<p>Além disso, desta forma é mais dinâmico, com replace você precisa saber exatamente o que você quer substituir, value.Number() vai valer para qualquer número, não ficará limitado apenas para 123.</p>\n<p>Ainda assim, <strong>se você já sabe que a sua string irá sofrer mutações, compensa mais usar String builder, portanto, use a estrutura correta</strong>.</p>\n<h2 id=\"palavras-finais\"><a href=\"#palavras-finais\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Palavras finais</h2>\n<p>O Pandemonium trás diversos outros métodos de extensão não citados aqui, porém o objetivo deste artigo é trazer uma reflexão sobre como escrevemos o nosso código, não apresentar a biblioteca em si.</p>\n<p>Como reflexão, deixo duas indagações:</p>\n<p>Quão distante está uma linguagem de programação de uma língua (como a língua inglesa)?\nSerá que escrever um texto com clareza é muito diferente de escrever um código claro?</p>\n"}},{"node":{"title":"Métodos de extensão","path":"/metodos-de-extensao/","date":"09/03/2020","timeToRead":5,"description":"Métodos de extensão pertencem a categoria de métodos estáticos, no entanto, possuem a sutil divergência de serem usados como métodos de instancias da tipagem estendida.","content":"<h2 id=\"introdução\"><a href=\"#introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introdução</h2>\n<p>O presente artigo objetiva demonstrar o uso de métodos de extensão em paralelo com: DRY, Legibilidade e HOF </p>\n<p>Métodos de extensão pertencem a categoria de métodos estáticos, no entanto, possuem a sutil divergência de serem usados como métodos de instancias da tipagem estendida</p>\n<h2 id=\"1-demonstração\"><a href=\"#1-demonstra%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Demonstração</h2>\n<p>Supondo que precisássemos escrever um código que exibisse o segundo caractere de uma string (sim, já existe o método First, por isso decide obter o segundo caractere. Sim, eu sou uma pessoa muito criativa), poderíamos escrevê-lo da seguinte maneira:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Linkedin\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">char</span></span> secondLetter <span class=\"token operator\">=</span> text<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Agora, apenas para exemplificar o conceito, iremos <strong>estender</strong> a funcionalidade para obter o segundo caractere de uma string. Primeiro, criaremos uma classe estática que ira conter nosso método de extensão. Em seguida, declararemos o método propriamente dito. Veja a seguir:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Extensions</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">char</span></span> <span class=\"token function\">Second</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> text<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>O pulo do gato está na palavra reservada this, a qual antecede o primeiro parâmetro do nosso método. Basicamente, estamos proferindo que: toda valor da tipagem string, seja uma constante ou uma variável, terá o comportamento Second. </p>\n<p>Portanto, podemos realizar o mesmo comportamento do seguinte modo:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Linkedin\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">char</span></span> secondLetter <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">Second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"2-dry-dont-repeat-yourself\"><a href=\"#2-dry-dont-repeat-yourself\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. DRY (Don't repeat yourself)</h2>\n<p>Métodos de extensão podem auxiliar a evadir a duplicação de código.</p>\n<p>Vamos usar o Dictionary do C# como exemplo. É bastante comum gerir quando um valor deve ser inserido ou atualizado, afinal de contas, não podemos atualizar um valor caso a chave inexista no dicionário. Esse controle pode ser representado como na maneira abaixo:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> peopleByAge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Ayame\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Zenki\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">37</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"Ayame\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> notContains <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>peopleByAge<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>notContains<span class=\"token punctuation\">)</span>\n    peopleByAge<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    peopleByAge<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">35</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Temos um dicionário que engloba chaves do tipo string e valores do tipo inteiro. Esse dicionário representa nomes como chaves e idades como valores. E para gerir se uma pessoa deve ser inserida ou atualizada, fazemos um controle simples: verificamos se a chave existe no dicionário, se ela não existir então inserimos uma pessoa, caso contrário, acessamos o dicionário pelo nome dela e sobrescrevemos a sua idade.</p>\n<p>Certo, mas será que esse comportamento não ocorre em diversas partes de um sistema? E será que em todas essas partes essa lógica não acaba sendo duplicada?</p>\n<p>Pois é, apesar do Dictionary não prover um método que exerça esta ação, nada nos impede de <strong>estendermos</strong> este comportamento. Basta criamos um método de extensão! Porém, desta vez, faremos um <strong>método de extensão genérico</strong>, segue abaixo:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">TValue</span> <span class=\"token generic-method\"><span class=\"token function\">Upsert</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IDictionary<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TKey</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TValue</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> notContains <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>@<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>notContains<span class=\"token punctuation\">)</span>\n        @<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">KeyValuePair<span class=\"token punctuation\">&lt;</span>TKey<span class=\"token punctuation\">,</span> TValue<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">else</span>\n        @<span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> peopleByAge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Ayame\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"Zenki\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">37</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"Ayame\"</span><span class=\"token punctuation\">;</span>\n\npeopleByAge<span class=\"token punctuation\">.</span><span class=\"token function\">Upsert</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Assim obtemos o mesmo resultado com apenas uma linha, além de evitar repetir o mesmo fluxo em todas as partes do sistema.</p>\n<h2 id=\"3-legibilidade\"><a href=\"#3-legibilidade\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Legibilidade</h2>\n<p>Existe uma polêmica milenar de desenvolvedores que negam variáveis booleanas com o operador de negação enquanto outros utilizam o == false. Eu discordo de ambos.</p>\n<p>Acredito que, por questão semântica, toda verificação booleana deva ser auferida tanto por um comportamento que ratifica o caso verdadeiro quanto por um comportamento que certifica o caso falso. Para elucidar minha visão, usaremos como exemplo, o método Contains de uma string.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello LinkedIn\"</span><span class=\"token punctuation\">;</span>\n\nmessage<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedIn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">!</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedIn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessage<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedIn\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Ao invés de usar ! ou == false, não fica mais claro escrevermos do jeito abaixo?</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">NotContains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>@<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello LinkedIn\"</span><span class=\"token punctuation\">;</span>\n\nmessage<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedIn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmessage<span class=\"token punctuation\">.</span><span class=\"token function\">NotContains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LinkedIn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Um outro exemplo clássico: Any. Podemos usar o método Any para verificar se há algum elemento que condiga com predicado parametrizado. Entretanto, quando precisamos confirmar o contrario, ou seja, verificar que não há elemento algum que corresponda com predicado parametrizado, novamente seria usado a negação, porém não faria mais sentido estender um método genérico chamado None que fizesse isso por nós?</p>\n<h2 id=\"4-hof-higher-order-function\"><a href=\"#4-hof-higher-order-function\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. HOF (Higher order function)</h2>\n<p>Higher order function ou função de alta ordem para os lusófonos, pode ser categorizada como:</p>\n<ul>\n<li>Uma função que recebe uma ou mais funções como argumento;</li>\n<li>Ou uma função que retorna uma função;</li>\n<li>Ou ambos os casos.</li>\n</ul>\n<p>Primeiro, vamos usar o seguinte cenário como exemplo: precisamos escrever um código que receba um número inteiro como entrada e então devemos exibir na tela se este número é maior ou menor do que 10.</p>\n<p>Pois bem, uma forma de resolver esse problema seria a seguinte:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> number <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isGreaterThanTen <span class=\"token operator\">=</span> number <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isGreaterThanTen<span class=\"token punctuation\">)</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number is greater than 10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number is less than 10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Poderíamos usar o operador ternário para alternar a mensagem que seria mostrada, visto que se trata de um cenário simples, mas vamos usar if e else para facilitar as coisas.</p>\n<p>Certo, agora veja como conseguimos deixar nosso código com uma pegada mais funcional usando métodos de extensão.</p>\n<p>Primeiro iremos <strong>estender</strong> um comportamento para validar se um inteiro é maior que outro:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">GreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> number<span class=\"token punctuation\">)</span> \n    <span class=\"token operator\">=></span> @<span class=\"token keyword\">this</span> <span class=\"token operator\">></span> number<span class=\"token punctuation\">;</span></code></pre>\n<p>Receberemos um booleano. Agora iremos estender um comportamento para executar uma função caso o valor booleano seja verdadeiro:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>@<span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Além disso, estenderemos também um comportamento para executar uma função caso o valor booleano seja falso:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Otherwise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> @<span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action</span> action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>@<span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Agora, veja o resultado final:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> number <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\nnumber\n      <span class=\"token punctuation\">.</span><span class=\"token function\">GreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">Then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">number</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> is greater than 10\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// if</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">Otherwise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">number</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> is less than 10\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// else</span></code></pre>\n<p>GreaterThan retorna um booleano, como temos um booleano de retorno podemos usar o comportamento Then, o qual irá exibir a mensagem informando que o número é de fato maior que dez, mas note que o Then além de usar @this no if, também o retorna ao final da função, com isso nós temos um booleano, portanto, podemos usar o comportamento Otherwise, o qual irá exibir a mensagem informando que o número é de fato menor do que dez. Com apenas três métodos de extensão conseguimos montar um encadeamento simples para resolver o problema com um código completamente diferente.</p>\n<h2 id=\"palavras-finais\"><a href=\"#palavras-finais\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Palavras finais</h2>\n<p>Estes foram alguns exemplos simples que visam expor a diferença que os métodos de extensão podem trazer em uma base de código.</p>\n"}},{"node":{"title":"Operator overloading","path":"/operator-overloading/","date":"29/09/2019","timeToRead":4,"description":"Sobrecarga é um conceito costumeiro no universo da programação, no entanto, estamos mais familiarizados com essa feature conduzida a construtores e métodos.","content":"<h2 id=\"introdução\"><a href=\"#introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introdução</h2>\n<p>Sobrecarga é um conceito costumeiro no universo da programação, no entanto, estamos mais familiarizados com essa feature conduzida a construtores e métodos.</p>\n<h4 id=\"mas-primeiramente-o-que-é-sobrecarga-de-método-e-sobrecarga-de-construtor\"><a href=\"#mas-primeiramente-o-que-%C3%A9-sobrecarga-de-m%C3%A9todo-e-sobrecarga-de-construtor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mas primeiramente, o que é sobrecarga de método e sobrecarga de construtor?</h4>\n<p>A sobrecarga de método é um artifício que permite uma classe ter mais de um método com o mesmo nome, contanto que seus argumentos sejam dessemelhantes. O mesmo se aplica aos construtores, desde que seus argumentos sejam distintos. Vejamos alguns exemplos no seguinte trecho:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OverloadSample</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">OverloadSample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Sobrecarga de construtor #1</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">OverloadSample</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> something<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Sobrecarga de método #1: Mesma quantidade de parâmetros, porém com tipagem distinta.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Sobrecarga de método #2: Retorno com tipagem diferente, mas com quantidade de parâmetros divergente.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"1-sobrecarga-de-operador\"><a href=\"#1-sobrecarga-de-operador\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Sobrecarga de operador</h2>\n<p>Sobrecarga é um conceito costumeiro no universo da programação, no entanto, estamos mais familiarizados com essa feature conduzida a construtores e métodos.</p>\n<p>Como supramencionado, sobrecarga é um conceito deveras popular, entretanto, nem todos os programadores estão cônscios que sobrecarregar um operador é uma ação plenamente exequível. </p>\n<p>Para aplicar este conceito, iremos trabalhar em cima de um exemplo demasiadamente simples: iremos criar uma classe chamada <strong>NonNullOrEmptyString</strong>, esta classe será responsável por representar uma string que não pode ser nula nem vazia.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NonNullOrEmptyString</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value cannot be null or empty.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        Value <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Estamos acostumados a criar um objeto através da palavra-chave <strong>new</strong>, logo, em primeiro momento, pensaríamos em criar nosso objeto da seguinte forma:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">NonNullOrEmptyString</span> sample <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Contudo, se eu disser: podemos criar esse objeto de uma maneira mais simplificada, inclusive, atribuindo a string “Hello” diretamente ao objeto. O que você diria?</p>\n<h2 id=\"2-operadores-de-conversão\"><a href=\"#2-operadores-de-convers%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Operadores de conversão</h2>\n<p>Antes de tudo, o que é conversão? </p>\n<p>Conversão é a ação que permite que um valor de um tipo seja transformado em outro tipo qualquer. Uma conversão pode ser categorizada como <strong>implícita*</strong> ou <strong>explícita</strong>. </p>\n<p>A conversão <strong>implícita</strong> ocorre de modo imperceptível sob as condições de haver um operador (de conversão implícita) definido bem como a compatibilidade entre os dois tipos. </p>\n<p>Já a conversão <strong>explícita</strong> intercorre quando os dois tipos não são integralmente compatíveis, portanto, é requerido que o tipo de origem seja prefixado com um operador de conversão (famigerado <strong>casting</strong>).</p>\n<p>Então, para começar, que tal sobrecarregarmos nossos primeiros operadores de conversão? </p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> @<span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span>@<span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> @<span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> @<span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span></code></pre>\n<p>Muito bem, agora que temos nossas primeiras sobrecargas podemos criar nossos objetos da seguinte maneira:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Implicit conversion</span>\n<span class=\"token class-name\">NonNullOrEmptyString</span> firstText <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Explicit conversion</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> secondText <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yahallo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Criamos nossos objetos com conversão implícita, desta forma, é praticável atribuir uma string diretamente para nossos objetos do tipo <strong>NonNullOrEmptyString</strong>. Podemos também transmutar nosso objeto para uma string, através de uma conversão explícita previamente definida em nossa classe. </p>\n<blockquote>\n<p>Lembre-se: estamos falando de sobrecargas, portanto, podemos definir diversas sobrecargas de operadores.</p>\n</blockquote>\n<p>Vamos supor que agora quiséssemos comparar se o valor de uma <strong>NonNullOrEmptyString</strong> é igual ou diferente de outra <strong>NonNullOrEmptyString.</strong> Bom, estamos falando de objetos, então se os compararmos diretamente será levado em conta a referência deles e não os seus valores. Logo, a opção que nos resta é fazer essa comparação da seguinte forma, certo?</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">==</span> secondText<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">!=</span> secondText<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>Errou, errou feio, errou rude</strong>. Temos ainda a opção de sobrescrever o método Equals, oriundo da memorável classe <strong>Object</strong>, mas não faremos desta forma, pois o assunto do artigo é sobrecarga, não sobrescrita.</p>\n<p>Então o que podemos fazer... Que tal uma sobrecarga nos operadores == e !=?</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Legal, agora podemos fazer a comparação de valores sem precisar acessar a propriedade Value dos nossos objetos:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">==</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">!=</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">==</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">!=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>E se quiséssemos concatenar nossos objetos, poderíamos? Certamente, basta\nsobrecarregar nosso operador <strong>+</strong>:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> NonNullOrEmptyString <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NonNullOrEmptyString</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Assim, podemos:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">+</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Para ultimar a brincadeira vamos sobrecarregar os seguintes operadores: menor, maior, menor-igual e maior-igual.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NonNullOrEmptyString</span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NonNullOrEmptyString</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></code></pre>\n<p>Portanto:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">></span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">&lt;</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">>=</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>firstText <span class=\"token operator\">&lt;=</span> secondText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"conclusão\"><a href=\"#conclus%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusão</h2>\n<p>Neste artigo foi realizado a demonstração de alguns operadores que permitem a operação de sobrecarga, no entanto, vale enfatizar que é possível também sobrecarregar outros operadores.</p>\n"}}]}}},"context":{}}