{"hash":"21e8d6024374c8b3453b554d6d762f3435f72b44","data":{"tag":{"title":"Reflexão","belongsTo":{"edges":[{"node":{"title":"Orientação a objetos (1) - lidando com estados sem o uso de estruturas condicionais","path":"/orientacao-a-objetos-1-lidando-com-estados-sem-o-uso-de-estruturas-condicionais/","date":"10/09/2020","timeToRead":5,"description":"Há quem diga dominar o paradigma orientado a objetos e há quem considere questionável esta assertiva. Em qual destes grupos você se encaixa?","content":"<h2 id=\"1-introdução\"><a href=\"#1-introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Introdução</h2>\n<p>Há quem diga dominar o paradigma orientado a objetos e há quem considere questionável esta assertiva. Em qual destes grupos você se encaixa?</p>\n<p>Apesar da orientação a objetos ser imensamente afamada, pode-se exprimir que é relativamente fácil esbarrar em códigos \"orientados a objetos\" escassos de objetos. Esta escassez é frequentemente preenchida com aspectos imperativos em demasia.</p>\n<p>Permita-me, através deste artigo, expor um cenário para reflexionarmos sobre orientação a objetos.</p>\n<h2 id=\"2-cenário\"><a href=\"#2-cen%C3%A1rio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Cenário</h2>\n<p>Considere um simulador de banco em que seja possível <strong>depositar</strong>, <strong>sacar</strong>, <strong>fechar</strong>, <strong>ativar</strong> e <strong>congelar</strong> uma <strong>conta</strong>.</p>\n<ul>\n<li>Quando criada, uma conta tem seu estado valorado como ativa e seu saldo é equivalente a zero;</li>\n<li>Quando fechada, uma conta não deve realizar as operaçōes depositar e sacar, entretanto, uma conta fechada pode alterar seu estado para ativa ou congelada;</li>\n<li>Quando congelada, uma conta pode realizar as operaçōes depositar e sacar, no entanto, ao realizar algumas destas operaçōes, seu estado deve alterar para ativa. Naturalmente, uma conta congelada pode alterar seu estado para ativa ou fechada;</li>\n<li>Quando ativa, uma conta pode realizar as operaçōes depositar e sacar. Similarmente, uma conta ativa pode alterar seu estado para congelada ou fechada;</li>\n<li>Não há necessidade de validar o valor requisitado em um saque (não é foco do artigo, manteremos o mais simples possível);</li>\n</ul>\n<p><strong>Atenda os requisitos acima sem utilizar flags booleanas e estruturas condicionais</strong>.</p>\n<p>Qual a sua solução para este problema?</p>\n<h3 id=\"21-resolução\"><a href=\"#21-resolu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2.1 Resolução</h3>\n<p>Primeiramente, <strong>esqueça que flags, if, switch existem</strong>. Pense em objetos.</p>\n<ul>\n<li>Há três estados que uma conta pode assumir, iremos representá-los com objetos. Cada estado será um objeto;</li>\n<li>Há dois comportamentos definidos de forma explícita: depositar e sacar. Estes comportamentos variam de acordo com o estado da conta, ou seja, a implementação de cada estado ficará responsável por representar a ação esperada destes comportamentos;</li>\n<li>Há três comportamentos definidos de forma implícita: ativar uma conta, fechar uma conta e congelar uma conta. Outra vez, a implementação de cada estado ficará responsável por reproduzir estas ações;</li>\n</ul>\n<p>Seguindo estes princípios, podemos definir um contrato, o qual todo estado deve assinar:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IState</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onDeposit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onWithdraw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>A partir de então, partimos para a implementação do estado fechado:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Closed</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IState</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Active</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onDeposit<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Frozen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onWithdraw<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Activate: uma conta fechada pode alterar seu estado para ativa. Ao ativar uma conta que estava fechada, um objeto (Active) é retornado;</li>\n<li>Close: Ao \"fechar\" uma conta já fechada, nada é feito, pois a mesma já estava fechada, portanto, é retornado o próprio objeto;</li>\n<li>Deposit: uma conta fechada não deve realizar a operação de depósito, neste caso nenhum comportamento é executado, além de retornar o próprio objeto;</li>\n<li>Freeze: uma conta fechada pode alterar seu estado para congelada. Ao congelar uma conta que estava fechada, um objeto (Frozen) é retornado;</li>\n<li>Withdraw: uma conta fechada não deve realizar a operação de saque, neste caso nenhum comportamento é executado, além de retornar o próprio objeto.</li>\n</ul>\n<p>Até aqui, o que estamos usando mesmo? <strong>Objetos</strong>!</p>\n<p>Implementação do estado congelado:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Frozen</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IState</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Active</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     \n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Closed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onDeposit<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onDeposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onWithdraw<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onWithdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Activate: uma conta congelada pode alterar seu estado para ativa. Ao ativar uma conta que estava congelada, um objeto (Active) é retornado;</li>\n<li>Close: uma conta congelada pode alterar seu estado para fechada. Ao fechar uma conta que estava congelada, um objeto (Closed) é retornado;</li>\n<li>Deposit: uma conta congelada pode realizar a operação de depósito, entretanto, ao realizar esta operação, seu estado deve alterar para ativa. Portanto, após a ação ser feita, um objeto (Active) é retornado;</li>\n<li>Freeze: Ao \"congelar\" uma conta já congelada, nada é feito, pois a mesma já estava congelada, portanto, é retornado o próprio objeto;</li>\n<li>Withdraw: uma conta congelada pode realizar a operação de saque, entretanto, ao realizar esta operação, seu estado deve alterar para ativa. Portanto, após a ação ser feita, um objeto (Active) é retornado;</li>\n</ul>\n<p>Implementação do estado ativo:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Active</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IState</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Closed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onDeposit<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onDeposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Frozen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IState</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> onWithdraw<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onWithdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Activate: Ao \"ativar\" uma conta já ativa, nada é feito, pois a mesma já estava ativa, portanto, é retornado o próprio objeto;</li>\n<li>Close: uma conta ativa pode alterar seu estado para fechada. Ao fechar uma conta que estava ativa, um objeto (Closed) é retornado;</li>\n<li>Deposit: uma conta ativa pode realizar a operação de depósito;</li>\n<li>Freeze: uma conta ativa pode alterar seu estado para congelada. Ao congelar uma conta que estava ativa, um objeto (Frozen) é retornado;</li>\n<li>Withdraw: uma conta congelada pode realizar a operação de saque;</li>\n</ul>\n<p>Enfim, isto feito, podemos codificar a nossa conta:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Amount</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">decimal</span></span> Value \n        <span class=\"token operator\">=></span> _value<span class=\"token punctuation\">;</span> \n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> _value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Amount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _value <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">Amount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> amount<span class=\"token punctuation\">)</span> \n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Amount</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">decimal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span> \n        <span class=\"token operator\">=></span> amount<span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">LessThanOrEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _value<span class=\"token punctuation\">.</span><span class=\"token function\">LessThanOrEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Balance</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">decimal</span></span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> balance<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> Value <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">Balance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> balance<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Balance</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">explicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">decimal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Balance</span> balance<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> balance<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Balance</span> <span class=\"token function\">Increase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Balance</span><span class=\"token punctuation\">(</span>Value <span class=\"token operator\">+</span> amount<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Balance</span> <span class=\"token function\">Decrease</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Balance</span><span class=\"token punctuation\">(</span>Value <span class=\"token operator\">-</span> amount<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">GreaterOrEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> amount<span class=\"token punctuation\">.</span><span class=\"token function\">LessThanOrEqualTo</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Balance</span> Balance <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">IState</span> _state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Amount<span class=\"token punctuation\">></span></span> _deposit<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Amount<span class=\"token punctuation\">></span></span> _withdraw<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_state <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Active</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_deposit <span class=\"token operator\">=</span> amount <span class=\"token operator\">=></span> Balance <span class=\"token operator\">=</span> Balance<span class=\"token punctuation\">.</span><span class=\"token function\">Increase</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_withdraw <span class=\"token operator\">=</span> amount <span class=\"token operator\">=></span> Balance <span class=\"token operator\">=</span> Balance<span class=\"token punctuation\">.</span><span class=\"token function\">Decrease</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n    \n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _state<span class=\"token punctuation\">.</span><span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _state<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _state<span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _state<span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">_deposit</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Amount</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _state<span class=\"token punctuation\">.</span><span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">_withdraw</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Account</span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>IState<span class=\"token punctuation\">></span></span> onChange<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _state <span class=\"token operator\">=</span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>A magia está presente na orquestração de estado, onde um objeto do tipo Account se comunica com um objeto do tipo IState, através de uma abordagem polimórfica.</p>\n<p>Considerando que cada estado (objeto) mantém os próprios comportamentos, é necessário, portanto, apenas instrumentar a troca de estado (objeto) mediante ao objeto do tipo Account.</p>\n<p>Na prática o uso deste objeto poderá ser feito da seguinte maneira:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">decimal</span></span> balance <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// starts as active account</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 200</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 500</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// it turns to close, so it cannot deposit or withdraw</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// do nothing</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// do nothing</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// it turns to freeze, so it will turn to active if deposit or withdraw </span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1000 then turn to active </span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// it turns to freeze, so it will turn to active if deposit or withdraw </span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// it turns to close, so it cannot deposit or withdraw</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// do nothing</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Activate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Deposit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3000 </span>\n    <span class=\"token punctuation\">.</span>Balance\n    <span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3000</span></code></pre>\n<h2 id=\"palavras-finais\"><a href=\"#palavras-finais\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Palavras finais</h2>\n<p>Quão orientado a objetos é o código que tu escreves? Você acredita realmente tirar um bom proveito dos recursos que a orientação a objetos prove para ti?</p>\n"}},{"node":{"title":"O contexto musical por trás da linguagem C#","path":"/o-contexto-musical-por-tras-da-linguagem-c/","date":"24/08/2020","timeToRead":2,"description":"Inteligibilidade é comumente negligenciada quando estamos dando nossos primeiros passos no mundo da programação. Manifeste-se, por favor, quem em nenhuma circunstância declarou variáveis desprovidas de semântica.","content":"<h2 id=\"1-introdução\"><a href=\"#1-introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Introdução</h2>\n<p>C# é uma das linguagens de programação que eu particularmente mais gosto, fui facilmente cativado quando a experimentei. Entretanto, antes mesmo de usá-la havia um detalhe que chamava bastante a minha atenção: o nome.</p>\n<p>C♯ é um símbolo afamado no âmbito musical, qualquer musicista é capaz de reconhecer o famigerado dó sustenido.</p>\n<p>Ok, mas o que raios é um dó sustenido? (╯°□°）╯︵ ┻━┻</p>\n<p>Antes de responder essa pergunta, permita-me falar um pouco sobre auto-incremento para termos um pouco de contexto.</p>\n<h2 id=\"2-operadores-de-auto-incremento\"><a href=\"#2-operadores-de-auto-incremento\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Operadores de auto-incremento</h2>\n<p>No contexto computacional, o operador ++ representa auto-incremento. Podemos fragmentar o auto-incremento em duas categorias distintas: pré-incremento e pós-incremento.</p>\n<p>O pré-incremento ocorre quando usamos o operador de auto-incremento antes da variável. Por consequência, o incremento é efetuado de imediato, previamente ao restante da instrução vigente:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">byte</span></span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre>\n<p>O pós-incremento, no entanto, é realizado posteriormente ao restante da instrução vigente, afinal o operador de auto-incremento é declarado depois da variável:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">byte</span></span> <span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n\n<span class=\"token comment\">// Somente após a instrução vigente se torna 2</span>\n<span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre>\n<p>O conceito de auto-incremento é usado no nome do C++. Da a entender que é um C incrementado, um C com extensão a orientação a objetos.</p>\n<p>Muito bem, com isto esclarecido podemos enfim ir para o contexto musical.</p>\n<h2 id=\"tom-semitom-sustenido-e-bemol\"><a href=\"#tom-semitom-sustenido-e-bemol\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tom, semitom, sustenido e bemol</h2>\n<p>Apesar de nem todos se interessarem por música, eu arrisco dizer que muita gente conhece a escala de dó maior: C (dó), D (ré), E (mi), F (fá), G (sol), A (lá), B (si).</p>\n<p>Com essa escala podemos entender um pouquinho sobre tom e semitom. Considere a seguinte parte deste piano hipotético:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1819 1273' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ba2d9e1b4612c1761c49da0784e6835c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ba2d9e1b4612c1761c49da0784e6835c)' width='1819' height='1273' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAtAEADASIAAhEBAxEB/8QAHAAAAQQDAQAAAAAAAAAAAAAABwADBAUCBggB/8QAPBAAAQIEAwQGBggHAAAAAAAAAQIDAAQFEQYSIQgxQVETNzhhcnQHFDSxs7QVFiIjM0PCxDJCUnGR8PH/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8AJO0qy0j0DVtSW0JVlldQkD85uA3RkIOxhXF5U5hP6G2vtDUGjaY6hK34JX4zcBmjdi2uefHzDUAUtkdltz0PtFbaFH16Y3pB4piy2mWGkegquqQ0hKsstqEgfnNxB2Q%2bp5rz0x70xZbTfURXvDLfHbgAtREIOxhXllKcwn9DbX2hmFREIOxhXVlKcwn9DbX2hqMqJ2La958fMMwqH2Lq95/9w1AFDZHZbX6HkFbaFH16Y1KQf6YNLMsx0KPuWv4R/IOUBnZE6nUeemP0wa2fwUeEe6AE20x1CVvwSvxm4DVG7Ftd8/8AuGo6eqlPl6/KfQ1YpzM3SHWG1uJeQVJcIubaaDKUoOu%2b/dFUnCtGYpyMLMYckzhuYSl55kNkN5zmUSeGikN6b/tDlAaXsidTzXnpj3piy2m%2boiveGW%2bM3G54epsrht6Xo9CpLMlSFNF8llshIcVe45DcD/0Q5Wae1Xkmi1amMTlEdlkuPdOklKlhVwnvsQk/6IDmGidi2vefHzDUKh9i6vef/cNR0Y1hSiM0oYXaw7KDDkwEuuMhu7S1nMoki%2bllIR/cqHKPW8K0Fikt4XZw5LHDsyguvNJbPRB24Um478pN%2bBCecBouyJ1Oo89Mfpg1s/go8I90axQabL4adlqPQKMzKUdbZeWplJSlLigq/drlT/kRdNTEx9INsBm0sGkq6UgnMTmuARoLWTv35tN0A8250Mo2HELBCAk6cbWhIfSJYEpXYAJJtxh2av6s9lNlZDY2vY2iuozjruFZJxak9MuTQoqCbAEoB0HLugJjcwkS4JSuwASTbjHjb6RKglK7ABJ042iBTph76nS0yooL/qKXL5bJzdHfdy7oYwhPPVPBNPm3ciH3ZXXIn7IIBGg5aboC3bfSJYEpXYAJJtxhNPpEsklK7ABJNuMQ6K469hSRdWpPTLk0LKgmwBKAdBy7oVFW67haRcWtPTLk0KKgmwBKAdBy7oCYh9IlgSldgAkm3GMpd4FpNkLNgAdIraa%2b99TpaYUUF/1FLhOWyc3R33cu6McDT7tTwlSpt9KEuuMJzBAsm400HDdAf//Z' /%3e%3c/svg%3e\" width=\"1819\" alt=\"Som e semitom\" data-srcset=\"/assets/static/tom-e-semitom.82a2fbd.0ef09a610a6c18f5b2a458437ef0bdfa.jpeg 480w, /assets/static/tom-e-semitom.cbab2cf.0ef09a610a6c18f5b2a458437ef0bdfa.jpeg 1024w, /assets/static/tom-e-semitom.706ffb2.0ef09a610a6c18f5b2a458437ef0bdfa.jpeg 1819w\" data-sizes=\"(max-width: 1819px) 100vw, 1819px\" data-src=\"/assets/static/tom-e-semitom.706ffb2.0ef09a610a6c18f5b2a458437ef0bdfa.jpeg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/tom-e-semitom.706ffb2.0ef09a610a6c18f5b2a458437ef0bdfa.jpeg\" width=\"1819\" alt=\"Som e semitom\"></noscript></p>\n<p>De uma tecla branca para outra branca temos um tom, com exceção de E para F e de B para C, neste caso temos semitom.</p>\n<p>Entretanto, ainda temos as teclas pretas. Elas representam sustenidos e bemóis. Assim como de E para F temos um semitom, temos também um semitom entre C e D por exemplo, por isso a tecla preta entre elas. Portanto:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1819 1273' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1a595fdb8e67f68dc9f8666ce673ab8f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1a595fdb8e67f68dc9f8666ce673ab8f)' width='1819' height='1273' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAtAEADASIAAhEBAxEB/8QAHAAAAQQDAQAAAAAAAAAAAAAABwADBAUCBggB/8QAORAAAgECBAMGAggFBQAAAAAAAQIDBBEABRIhBggTBxQxQVFhFXEWIiMyMzRDciU1QpGxUoHh8PH/xAAUAQEAAAAAAAAAAAAAAAAAAAAA/8QAFBEBAAAAAAAAAAAAAAAAAAAAAP/aAAwDAQACEQMRAD8AJPMrDEnYNnbLGitppdwoH60eA3kyIeTDPH0rqFfsbb/mIsGzmOi6/Ybm0RdU190XU3gt549zgQ5TRaOUDOqMzwENmap1g90ANTDuT6C%2b/pgCNyjwxydj8ReNGPfqjxUHzXFlzMwRJ2FZ6yRIraabcKB%2btHiNynwGm7J%2biXR9FfUDUjAg7rvtix5k4ut2H51EXSPX3Ya3NgPt49zgAlkiIeTDPnKrqFfsbb/mIcLJEQ8mGeuVXUK/Y23/ADEWJWU0pj5Os%2bp%2bpGf4iF1hgVsaiHe4xlk1GU5Qc%2bo2mh/mgj6quGTephGq48vPAEblHhjfseQvGjHv1RuVB/04NMNNB0U%2bxi%2b6P6B6YEHKlT907KHg6kcujMKgB42DK33dwcGSH8FP2j/GAFXMeYl7DM3NQrPCBSl1U2JHXjvY4EOTyUh5Ps5cQuKQZihePVuR3iHVb572329cdJ5pl9Pn9J8GzjLoavKJYI3kWZCyyEXNtthpKod/G/tiqXhXJoMuThaDhyjPDdQqzTQiMiPWdTEny2ZI9vH6w9MBqfKo9M/ZQrUMUkUHfZ7JI2og/Vvv87/84n8yJiXsRzhqhGeAGlMiqbFl68dwP9sbdw9ltLw3NT5PkWUw0WUNEZyYYyFEjXuPQeAP/ow5nOXxZ8pyXNssgrMklplkm66kqzhrhfexCn/owHNeUSUjcn%2bfSJBIlH8SB6Wu7Be8Q3F/74WWNSNyeZ60EUqUvxBbqxux%2b3h1fK%2b/y98dBRcKZJDlQ4Xi4dpBw5UBZZIRHeJ3OpiSL7WZE%2bZYemPY%2bFchgymPheHhymPDtShlmiWM9IS3DLce%2bkm/kQvrgNN5VGpm7KWNDHLHTGvqNCysCw%2b74kYMcP4KftH%2bMaxkOW0/DUtNk%2bQZNDSZO8ZmdoVKqsjBr%2b2%2blf7jF1FUVHxCOAQ2phErdUgnUTquARsLWXx8dW3hgHo5OjSRiRHBCBTt52thJOopgSr2ACk288O1V%2b7TaTZtBsbXsbYrsmkll4VopHZes9GjFgtgCUB2Hp7YCZHUKKcEq9gApNvPHkc6ilBKvYAKdvO2IGXVE30Opqlihn7isl9Nl1dO/h6e2GOEK6bM%2bCcvq5dCTy0u%2bhfqggEbD028MBbxzqKYEq9gApNvPCinUUykq9gApNvPEPJZJZuFKGV2XrPRo5YLYAlAdh6e2Fkryy8LUMjuvWejRiwWwBKA7D09sBMSdRTAlXsAFJt54yp5gYlsjmwAO2K3LZ5vodTVDFDP3FZCdNl1dO/h6e2MeBq%2bXM%2bEsqq51RZZIF1BBZbjbYeXhgP/2Q==' /%3e%3c/svg%3e\" width=\"1819\" alt=\"Bemol\" data-srcset=\"/assets/static/bemol.82a2fbd.5e339f35eb60ce6e74bc173838f8e3f7.jpeg 480w, /assets/static/bemol.cbab2cf.5e339f35eb60ce6e74bc173838f8e3f7.jpeg 1024w, /assets/static/bemol.706ffb2.5e339f35eb60ce6e74bc173838f8e3f7.jpeg 1819w\" data-sizes=\"(max-width: 1819px) 100vw, 1819px\" data-src=\"/assets/static/bemol.706ffb2.5e339f35eb60ce6e74bc173838f8e3f7.jpeg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/bemol.706ffb2.5e339f35eb60ce6e74bc173838f8e3f7.jpeg\" width=\"1819\" alt=\"Bemol\"></noscript></p>\n<p>O ♯ (sustenido) indica que a nota deve ser elevada em meio tom. Por exemplo, F# é uma nota mais alta que F, porém não é mais alta que G, pois esta entre F e G. Já o ♭ (bemol) informa que uma nota deve ser abaixada em meio tom, logo A♭ é mais baixo que A, mas continua sendo mais alto que G.</p>\n<p>Há, inclusive, uma piada (que tem nexo somente em inglês) com sentido musical:</p>\n<p>Why C# is called C-sharp? To give the opportunity to C-sharp-haters to call it D-flat (D♭)</p>\n<h2 id=\"conclusão\"><a href=\"#conclus%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusão</h2>\n<p>Enfim, C++ usou o auto-incremento para representar a ideia de um C melhorado e o C# fez o mesmo, entretanto, através do sustenido. Na língua inglesa esse detalhe é mais obvio, pois dó sustenido é pronunciado como c-sharp, assim como a linguagem de programação.</p>\n<p>Mas confesso que em português seria muito estranho eu falar que programo em dó sustenido, pior ainda seria traduzi-lo como c-cerquilha, eu prefiro nem imaginar.</p>\n"}},{"node":{"title":"Obsessão por tipos primitivos","path":"/obsessao-por-tipos-primitivos/","date":"01/10/2019","timeToRead":3,"description":"O conceito de obsessão por tipos primitivos é auto-explicativo: uso excessivo de tipos primitivos. Parece ser algo notório, mas apenas parece.","content":"<h2 id=\"1-introdução\"><a href=\"#1-introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Introdução</h2>\n<p>O conceito de obsessão por tipos primitivos é auto-explicativo: uso excessivo de tipos primitivos. Parece ser algo notório, mas apenas parece. </p>\n<p>A obsessão por tipos primitivos nasce em momentos de obscurantismo e somente nos cientificamos de sua existência após cometer os mesmos equívocos incomensuráveis vezes.</p>\n<h2 id=\"2-cenário\"><a href=\"#2-cen%C3%A1rio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Cenário</h2>\n<p>Para ilustrar o tema criaremos uma classe chamada Account para simbolizar uma conta de acesso.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>Para cadastrar uma conta no nosso sistema hipotético definiu-se que:</p>\n<ul>\n<li>Uma conta de acesso deve conter um nome de usuário;</li>\n<li>Uma conta de acesso deve conter um email;</li>\n<li>Por fim, uma conta de acesso deve conter uma senha.</li>\n</ul>\n<p>Em seguida, nós temos a fabulosa ideia de criar todas essas propriedades como strings.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> \n<span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> email<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n        Email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n        Password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Username <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Email <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Password <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Até aí tudo bem, disse o frango na porta do forno _(ヅ)_/</p>\n<p>“Nome de usuário, email e senha são representações textuais, logo são strings”. Acontece que o mundo gira e vacilão roda. Senha não é uma representação textual qualquer, existem critérios que podem categorizá-la como valida ou invalida, segura ou insegura, da mesma forma que existem premissas que um email deve seguir.</p>\n<p>Veja só, a bola de lama que a nossa classe está se tornando:</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> \n<span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token function\">Account</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> email<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// validate username</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Regex<span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Too lazy to write a regex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// validate password</span>\n\n        Username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n        Email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n        Password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Ops, começamos a ter código duplicado, afinal precisamos validar o email novamente caso haja alguma tentativa de alterá-lo.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ChangeEmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> email<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Regex<span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Too lazy to write a regex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Parece que email não é simplesmente um texto, não é mesmo? </p>\n<h3 id=\"então-o-que-podemos-mudar\"><a href=\"#ent%C3%A3o-o-que-podemos-mudar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Então, o que podemos mudar?</h3>\n<p>Eu vejo algumas alternativas:</p>\n<ul>\n<li>Criar um helper para centralizar a lógica de validação de email e senha em métodos específicos (nope);</li>\n<li>Criar métodos de extensão para que a string passe a conter os métodos de validação de email e senha (nope);</li>\n<li>Criar uma classe chamada AccountValidator a qual será responsável por validar uma Account (nope).</li>\n</ul>\n<p>E o que todas essas abordagens têm em comum? Elas assumem que não é responsabilidade da classe Account validar um email. E neste ponto eu concordo, realmente não acho que seja responsabilidade dela validar um email, porém algo muito importante está passando despercebido: </p>\n<blockquote>\n<p>Desde quando é responsabilidade de uma string representar um email?</p>\n</blockquote>\n<p>Estamos usando uma linguagem que trabalha com o paradigma orientado a objetos, então por que estamos tão obcecados em usar os tipos primitivos? Bora orientar o nosso código! </p>\n<p>Tudo o que precisamos fazer é criar um modelo de Email para dispor desta responsabilidade, além disso, podemos usufruir dos operadores implícitos para facilitar a criação dos objetos do tipo Email.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Email</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _value<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Email <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> _value <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> Email <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=></span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Email</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> email<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Regex<span class=\"token punctuation\">.</span><span class=\"token function\">IsMatch</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Too lazy to write a regex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email is invalid.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Email</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>E assim preservamos a simplicidade para criar um email.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Email</span> email <span class=\"token operator\">=</span> <span class=\"token string\">\"operator@implicito.com\"</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Pronto, temos uma representação de um email que se preocupa com as responsabilidades de um email. Doravante, a classe Account encarrega-se somente em ratificar se o email é nulo.</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> Account <span class=\"token punctuation\">(</span><span class=\"token class-name\">Username</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Email</span> email<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Password</span> password<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>   \n    Username <span class=\"token operator\">=</span> username <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Username cannot be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Email <span class=\"token operator\">=</span> email <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email cannot be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Password <span class=\"token operator\">=</span> password <span class=\"token operator\">??</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Password cannot be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"palavras-finais\"><a href=\"#palavras-finais\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Palavras finais</h2>\n<p>A classe Account passa a ficar menos carregada e nosso código começa a ganhar mais semântica.</p>\n<p>Outros exemplos comuns de obsessão por tipos primitivos: CPF, CNPJ, IP, CEP e por ai vai.</p>\n"}},{"node":{"title":"As realidades adjacentes ao universo da codificação","path":"/as-realidades-adjacentes-ao-universo-da-codificacao/","date":"07/12/2018","timeToRead":2,"description":"Ao perpassar do nosso ínfimo lapso existencial assimilamos novos conceitos e por conseguinte ampliamos nosso intelecto em consonância com a nossa cosmovisão. Tal-qualmente, remodelamos nossa concepção perante a acepção de alguns vocábulos.","content":"<h2 id=\"1-introdução\"><a href=\"#1-introdu%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Introdução</h2>\n<p>Ao perpassar do nosso ínfimo lapso existencial (comumente conhecido como vida) assimilamos novos conceitos e por conseguinte ampliamos nosso intelecto em consonância com a nossa cosmovisão. Tal-qualmente, remodelamos nossa concepção perante a acepção de alguns vocábulos.</p>\n<h2 id=\"2-codificação--programação\"><a href=\"#2-codifica%C3%A7%C3%A3o--programa%C3%A7%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Codificação != Programação</h2>\n<p>Estou muito longe de me considerar um <em>wordsmith</em>, contudo gostaria de explanar de modo lacônico as distinções entre os termos <strong>codificação</strong> e <strong>programação</strong>.</p>\n<p>Sob uma perspectiva exógena ambos os termos afiguram dispor do mesmo contexto semântico, no entanto, há uma diferença significativa entre eles.</p>\n<p>Primordialmente, em meus primeiros passos como aprendiz de programação,  eu acreditava que programar resumia-se a inserir um conjunto de instruções lógicas para executar comandos em um computador.</p>\n<p>Em outras palavras, eu enxergava a programação exclusivamente como o ato de escrever código — posteriormente eu percebi que este procedimento é empiricamente uma segmentação da programação, o qual costumo chamar de <strong>codificação</strong>.</p>\n<p>Codificar é apenas uma das incumbências delegadas ao programador, visto que desenvolver/melhorar um produto é mais do que “apenas escrever código”.</p>\n<p>Analisar problemas, idealizar soluções, sanar as dores do cliente, tornar o produto um facilitador, repetir este ciclo e melhorá-lo continuamente são alguns dos demais preceitos de um desenvolvedor.</p>\n<p>Em síntese, o processo de desenvolvimento principia na etapa de planejamento e perfaz somente ao alvejar seu respectivo propósito: <strong>entregar valor para o cliente</strong>.</p>\n<h2 id=\"3-valor-percebido\"><a href=\"#3-valor-percebido\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Valor percebido</h2>\n<blockquote>\n<p>\"Valor percebido baseia-se, na diferença entre o que o cliente obtém e os custos que ele assume pelas diferentes opções possíveis.\" (Philip Kotler)</p>\n</blockquote>\n<p>Para elucidar este conceito vamos usar como exemplo as células de 10 e 100 reais. Conjecturo  que não haja uma discrepância vultosa no que diz respeito o custo de produção destas cédulas, ainda assim, a cédula de 100 reais tem um valor dez vezes maior que a cédula de 10. Isto porque de alguma forma <strong>percebemos</strong> este <strong>valor</strong>, ainda que sejam apenas fragmentos de papel ¯_(ツ)_/¯.</p>\n<p>Em contrapartida, se não enxergamos valor em um produto/serviço deixamos de consumi-lo e exploramos outras alternativas. Com funcionalidades não é diferente, de nada adianta prover N funcionalidades no seu produto se o cliente não perceber valor em nenhuma delas.</p>\n<p>O valor percebido é um aspecto categoricamente subjetivo. Portanto, concerne ao cliente perceber valor nas funcionalidades presentes no produto. Isto posto,  torna-se evidente que se houver falha na recognição da <strong>experiência almejada pelo cliente</strong>, o mesmo não irá assentir o valor da funcionalidade desenvolvida.</p>\n<h2 id=\"4-priorização-seletiva-de-tarefas\"><a href=\"#4-prioriza%C3%A7%C3%A3o-seletiva-de-tarefas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Priorização seletiva de tarefas</h2>\n<p>Há momentos que tarefas complexas/extensas são outorgadas para o desenvolvedor, e ele como um mancebo metódico deve erigir mecanismos para escalonar este enumerado de labores.  </p>\n<p>Incumbências são ordinariamente priorizadas pelo apanágio de importância e premência, mas estes não são peremptoriamente os únicos predicados factíveis de priorização.</p>\n<p>Particularmente opto por fracionar as fainas deferidas à minha pessoa em múnus simplificados, os quais sistematizo pelos atributos de grau de complexidade e esforço.</p>\n<p>Vale ressaltar que nem sempre as tarefas mais complexas serão por consequência as mais trabalhosas.</p>\n<h2 id=\"palavras-finais\"><a href=\"#palavras-finais\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Palavras finais</h2>\n<p>É consuetudinário que minudências irrisórias demandem mais empenho que o expectável, entretanto, é preciso “pressentir o perigo e o caos” para evitar que a energia aplicada seja desperdiçada em algo nugativo. Sendo assim, destine sua energia para ações que agregam valor.</p>\n"}}]}}},"context":{}}